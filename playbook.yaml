---
- hosts: all
  vars:
    aux_nodes: "{{ hostvars[inventory_hostname]['aux_nodes'] | default([]) }}"
    app_nodes: "{{ hostvars[inventory_hostname]['app_nodes'] | default([]) }}"
    conda_env: "{{ hostvars[inventory_hostname]['conda_env'] }}"
    dino_env: "{{ hostvars[inventory_hostname]['dino_env'] }}"
    dino_dir: "{{ hostvars[inventory_hostname]['dino_dir'] }}"
    nr_aux_nodes: "{{ hostvars[inventory_hostname]['aux_nodes'] | length }}"
    env_vars:
        DINO_ENV: "{{ dino_env }}"
        DINO_HOME: "{{ dino_home }}"

  tasks:
    - name: stop dino app nodes async
      systemd:
        name: "{{ async_item }}"
        state: stopped
      async: 60
      poll: 0
      with_items: "{{ app_nodes }}"
      loop_control:
        loop_var: "async_item"
      register: async_results
  
    - name: wait for app nodes to stop
      async_status:
        jid: "{{ async_result_item.ansible_job_id }}"
      with_items: "{{ async_results.results }}"
      loop_control:
        loop_var: "async_result_item"
      register: async_poll_results
      until: async_poll_results.finished
      retries: 30
  
    - name: stop dino aux nodes
      systemd:
        name: "{{ item }}"
        state: stopped
      with_items: "{{ aux_nodes }}"
      when: nr_aux_nodes | int != 0
      tags:
        - aux
  
    - name: checkout tag from git
      shell: bash bin/checkout_tag.sh "{{ dino_tag }}"
      args:
        chdir: "{{ dino_dir }}"

    - name: install requirements
      shell: bash bin/install_requirements.sh "{{ conda_env }}"
      args:
        chdir: "{{ dino_dir }}"
  
    - name: run cleanup scripts
      shell: bash bin/run_cleanup.sh "{{ dino_dir }}" "{{ dino_env }}" "{{ conda_env }}"
      args:
        chdir: "{{ dino_dir }}"
      when: nr_aux_nodes | int != 0
      tags:
        - aux
  
    - name: start dino aux nodes
      systemd:
        name: "{{ item }}"
        state: started
      with_items: "{{ aux_nodes }}"
      when: nr_aux_nodes | int != 0
      tags:
        - aux
  
    - name: start dino app nodes
      systemd:
        name: "{{ item }}"
        state: started
      with_items: "{{ app_nodes }}"

