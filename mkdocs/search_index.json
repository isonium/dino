{
    "docs": [
        {
            "location": "/",
            "text": "Dino\n\n\nDino is a distributed notification service intended to push events to groups of clients. Example use cases are chat \nserver, real-time notifications for websites, push notifications for mobile apps, multi-player browser games, and more. \nDino is un-opinionated and any kind of events can be sent, meaning Dino only acts as the router of events between \nclients.\n\n\nAny number of nodes can be started on different machines or same machine on different port. Flask will handle connection\n routing using either Redis or RabbitMQ as a message queue internally. An nginx reverse proxy needs to sit in-front of\n all these nodes with sticky sessions (\nip_hash\n). Fail-over can be configured in nginx for high availability.",
            "title": "Home"
        },
        {
            "location": "/#dino",
            "text": "Dino is a distributed notification service intended to push events to groups of clients. Example use cases are chat \nserver, real-time notifications for websites, push notifications for mobile apps, multi-player browser games, and more. \nDino is un-opinionated and any kind of events can be sent, meaning Dino only acts as the router of events between \nclients.  Any number of nodes can be started on different machines or same machine on different port. Flask will handle connection\n routing using either Redis or RabbitMQ as a message queue internally. An nginx reverse proxy needs to sit in-front of\n all these nodes with sticky sessions ( ip_hash ). Fail-over can be configured in nginx for high availability.",
            "title": "Dino"
        },
        {
            "location": "/md/installation/",
            "text": "Requirements\n\n\nSome package requirements (debian/ubuntu):\n\n\n$ sudo apt-get update\n$ sudo apt-get install tar git curl nano wget dialog net-tools build-essential\n$ sudo apt-get install libssl-dev libmysqlclient-dev libpq-dev virtualenv\n\n\n\nRequires Python >=3.5. Download and install from source:\n\n\n$ wget https://www.python.org/ftp/python/3.5.2/Python-3.5.2.tar.xz\n$ tar -xvf Python-3.5.2.tar.xz\n$ cd Python-3.5.2/\n$ ./configure --prefix=/usr/local --enable-shared LDFLAGS=\"-Wl,-rpath /usr/local/lib\"\n$ make\n$ sudo make altinstall\n\n\n\nIf using redis, postgresql/mysql and cassandra, please see relevant documentation for how to install:\n\n\n\n\nRedis\n\n\nPostgreSQL\n\n\nMySQL\n\n\nApache Cassandra\n\n\n\n\nClustering\n\n\nIf clustering dino, install a reverse proxy that supports websockets, e.g. nginx. Here's an example configuration:\n\n\nupstream gridnodes {\n    ip_hash;\n\n    server some-ip-or-host-1:5210;\n    server some-ip-or-host-2:5210;\n    server some-ip-or-host-3:5210;\n    server some-ip-or-host-4:5210;\n    server some-ip-or-host-5:5210;\n    server some-ip-or-host-6:5210;\n    server some-ip-or-host-7:5210;\n    server some-ip-or-host-8:5210;\n}\n\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    '' close;\n}\n\nserver {\n    listen 5200;\n\n    location / {\n        access_log on;\n\n        proxy_pass http://gridnodes;\n        proxy_next_upstream error timeout invalid_header http_500;\n        proxy_connect_timeout 2;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        # WebSocket support (nginx 1.4)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n\n\n\nRunning the application\n\n\n$ cd dino/\n$ virtualenv --python=python3.5 env\n$ source env/bin/activate\n(env) $ pip install --upgrade -r requirements.txt\n(env) $ pip install --upgrade --no-deps .\n(env) $ ENVIRONMENT=dev gunicorn \\\n            --error-logfile ~/dino-gunicorn-error.log \\\n            --log-file ~/dino-gunicorn.log \\\n            --worker-class eventlet \\\n            --threads 1 \\\n            --worker-connections 5000 \\\n            --workers 1 \\\n            --bind 0.0.0.0:5210 \\\n            app:app\n\n\n\nTo run the rest API and admin interface use the same command but change \napp:app\n to \nrest:app\n and \nweb:app\n \nrespectively.\n\n\nRunning in Docker\n\n\nFirst create the image:\n\n\nsudo docker build -t dino .\n\n\n\nThen we can run it (create an environments file in secrets/ for your chosen environment (dev/prod/etc), e.g. \n\nsecrets/dev.env\n. Check the \nsecrets/default.env\n for an example. Then we can run the image:\n\n\nsudo docker run --env-file=secrets/dev.env --env DINO_PORT=5120 -t dino\n\n\n\nNote that we didn't put the port in the \ndev.env\n file (though we could), because if starting multiple dino nodes they\nneed to use different ports.\n\n\nRunning in Kubernetes\n\n\nFor running in Kubernetes we need to use Kubernetes \nSecrets\n instead of the \n.env\n files. Example configuration for \nsome secret values for your pod:\n\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: secret-env-pod\nspec:\n  containers:\n    - name: mycontainer\n      image: redis\n      env:\n        - name: DINO_DB_HOST\n          valueFrom:\n            secretKeyRef:\n              name: dev-secrets\n              key: db-host\n        - name: DINO_DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: dev-secrets\n              key: db-user\n  restartPolicy: Never\n\n\n\nRead more on Kubernetes website on \nhow to create the secrets object\n \nand then how to \nconfigure your pod to use it\n.\n\n\nBuilding the documentation\n\n\nViewing locally:\n\n\n$ mkdocs serve\n\n\n\nBuilding the site (not necessary):\n\n\n$ mkdocs build\n\n\n\nDeploy to gihub pages:\n\n\n$ mkdocs gh-deploy",
            "title": "Installation"
        },
        {
            "location": "/md/installation/#requirements",
            "text": "Some package requirements (debian/ubuntu):  $ sudo apt-get update\n$ sudo apt-get install tar git curl nano wget dialog net-tools build-essential\n$ sudo apt-get install libssl-dev libmysqlclient-dev libpq-dev virtualenv  Requires Python >=3.5. Download and install from source:  $ wget https://www.python.org/ftp/python/3.5.2/Python-3.5.2.tar.xz\n$ tar -xvf Python-3.5.2.tar.xz\n$ cd Python-3.5.2/\n$ ./configure --prefix=/usr/local --enable-shared LDFLAGS=\"-Wl,-rpath /usr/local/lib\"\n$ make\n$ sudo make altinstall  If using redis, postgresql/mysql and cassandra, please see relevant documentation for how to install:   Redis  PostgreSQL  MySQL  Apache Cassandra",
            "title": "Requirements"
        },
        {
            "location": "/md/installation/#clustering",
            "text": "If clustering dino, install a reverse proxy that supports websockets, e.g. nginx. Here's an example configuration:  upstream gridnodes {\n    ip_hash;\n\n    server some-ip-or-host-1:5210;\n    server some-ip-or-host-2:5210;\n    server some-ip-or-host-3:5210;\n    server some-ip-or-host-4:5210;\n    server some-ip-or-host-5:5210;\n    server some-ip-or-host-6:5210;\n    server some-ip-or-host-7:5210;\n    server some-ip-or-host-8:5210;\n}\n\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    '' close;\n}\n\nserver {\n    listen 5200;\n\n    location / {\n        access_log on;\n\n        proxy_pass http://gridnodes;\n        proxy_next_upstream error timeout invalid_header http_500;\n        proxy_connect_timeout 2;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        # WebSocket support (nginx 1.4)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}",
            "title": "Clustering"
        },
        {
            "location": "/md/installation/#running-the-application",
            "text": "$ cd dino/\n$ virtualenv --python=python3.5 env\n$ source env/bin/activate\n(env) $ pip install --upgrade -r requirements.txt\n(env) $ pip install --upgrade --no-deps .\n(env) $ ENVIRONMENT=dev gunicorn \\\n            --error-logfile ~/dino-gunicorn-error.log \\\n            --log-file ~/dino-gunicorn.log \\\n            --worker-class eventlet \\\n            --threads 1 \\\n            --worker-connections 5000 \\\n            --workers 1 \\\n            --bind 0.0.0.0:5210 \\\n            app:app  To run the rest API and admin interface use the same command but change  app:app  to  rest:app  and  web:app  \nrespectively.",
            "title": "Running the application"
        },
        {
            "location": "/md/installation/#running-in-docker",
            "text": "First create the image:  sudo docker build -t dino .  Then we can run it (create an environments file in secrets/ for your chosen environment (dev/prod/etc), e.g.  secrets/dev.env . Check the  secrets/default.env  for an example. Then we can run the image:  sudo docker run --env-file=secrets/dev.env --env DINO_PORT=5120 -t dino  Note that we didn't put the port in the  dev.env  file (though we could), because if starting multiple dino nodes they\nneed to use different ports.",
            "title": "Running in Docker"
        },
        {
            "location": "/md/installation/#running-in-kubernetes",
            "text": "For running in Kubernetes we need to use Kubernetes  Secrets  instead of the  .env  files. Example configuration for \nsome secret values for your pod:  apiVersion: v1\nkind: Pod\nmetadata:\n  name: secret-env-pod\nspec:\n  containers:\n    - name: mycontainer\n      image: redis\n      env:\n        - name: DINO_DB_HOST\n          valueFrom:\n            secretKeyRef:\n              name: dev-secrets\n              key: db-host\n        - name: DINO_DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: dev-secrets\n              key: db-user\n  restartPolicy: Never  Read more on Kubernetes website on  how to create the secrets object  \nand then how to  configure your pod to use it .",
            "title": "Running in Kubernetes"
        },
        {
            "location": "/md/installation/#building-the-documentation",
            "text": "Viewing locally:  $ mkdocs serve  Building the site (not necessary):  $ mkdocs build  Deploy to gihub pages:  $ mkdocs gh-deploy",
            "title": "Building the documentation"
        },
        {
            "location": "/md/getting_started/",
            "text": "This example is using JavaScript.\n\n\nFirst we connect to the server:\n\n\nsocket = io.connect(\n    'http://' + document.domain + ':' + location.port + '/chat', \n    {transports:['websocket']}\n);\n\n\n\nWe'll receive a \"connect\" event back after successfully connecting. Now we have to send the \"login\" event to provide the\nserver with some extra user information and to do authentication:\n\n\nsocket.on('connect', function() {\n    socket.emit('login', {\n        verb: 'login',\n        actor: {\n            id: '<user ID>',\n            attachments: [\n                {\n                    objectType: 'token',\n                    content: '<auth token>'\n                }\n            ]\n        }\n    });\n});\n\n\n\nAll events sent to the server will get a response with the same name plus a prefix of \"gn_\". For example, the login \nevent sent above will get the following response, \"gn_login\", meaning we've successfully authenticated with the server.\nNow we can start joining rooms, chatting, sending events etc.\n\n\nsocket.on('gn_login', function(response) {\n    socket.emit('list_channels', {\n        verb: 'list'\n    });\n});\n\n\n\nThe response from the server will be in JSON format. If no data is expected for the events, only a status code will be\nin the response. For example, sending the \"join\" event to join a room won't return any data, but only the following\n(if successful):\n\n\n{\n    \"status_code\": 200\n}\n\n\n\nFailure to execute an event on the server will return code 400:\n\n\n{\n    \"status_code\": 400,\n    \"data\": \"<an error message, always a string>\"\n}\n\n\n\nIf an internal server error occurs, code 500 is returned:\n\n\n{\n    \"status_code\": 500,\n    \"data\": \"<an error message, always a string>\"\n}\n\n\n\nFor events that contains data in the response, for example when sending the event \"list_channels\", we expect to get a list\nof channels in the response. For these events the data part is always a JSON in the ActivityStreams 1.0 format:\n\n\n{\n    \"status_code\": 400,\n    \"data\": {       \n        \"object\": {\n            \"objectType\": \"channels\"\n            \"attachments\": [\n                {\n                    \"id\": \"<channel ID 1>\",\n                    \"content\": \"<channel name 1 in base64>\"\n                },\n                {\n                    \"id\": \"<channel ID 2>\",\n                    \"content\": \"<channel name 2 in base64>\"\n                },\n                {\n                    \"id\": \"<channel ID 3>\",\n                    \"content\": \"<channel name 3 in base64>\"\n                }\n            ]\n        },\n        \"verb\": \"list\"\n    }\n}\n\n\n\nEncoding\n\n\nAll user names, room names, channel names and chat messages are expected to be base64 encoded unicode strings. All\nresponses and events originating from the server will also follow this practice, so when listing rooms/channels/users\nall names will always be in base64.\n\n\nAuthentication\n\n\nIf the \nredis\n authentication method is configured, then when clients send the \nlogin\n event to the server, the\nsupplied \ntoken\n and \nactor.id\n parameter must already exist in Redis. When the server gets the login event it will\ncheck if the token matches the one stored in Redis for this user ID, otherwise it will not authenticate the session.\n\n\nTherefor, before a client can login, these two values (and any other possible values used for permissions) needs to\nfirst be set in the Redis \nhset\n with key \nuser:auth:<user ID>\n.\n\n\nExample:\n\n\n$ redis-cli\n127.0.0.1:6379> hset user:auth:1234 token 302fe6be-a72f-11e6-b5fc-330653beb4be\n127.0.0.1:6379> hset user:auth:1234 age 35\n127.0.0.1:6379> hset user:auth:1234 gender m",
            "title": "Getting Started"
        },
        {
            "location": "/md/getting_started/#encoding",
            "text": "All user names, room names, channel names and chat messages are expected to be base64 encoded unicode strings. All\nresponses and events originating from the server will also follow this practice, so when listing rooms/channels/users\nall names will always be in base64.",
            "title": "Encoding"
        },
        {
            "location": "/md/getting_started/#authentication",
            "text": "If the  redis  authentication method is configured, then when clients send the  login  event to the server, the\nsupplied  token  and  actor.id  parameter must already exist in Redis. When the server gets the login event it will\ncheck if the token matches the one stored in Redis for this user ID, otherwise it will not authenticate the session.  Therefor, before a client can login, these two values (and any other possible values used for permissions) needs to\nfirst be set in the Redis  hset  with key  user:auth:<user ID> .  Example:  $ redis-cli\n127.0.0.1:6379> hset user:auth:1234 token 302fe6be-a72f-11e6-b5fc-330653beb4be\n127.0.0.1:6379> hset user:auth:1234 age 35\n127.0.0.1:6379> hset user:auth:1234 gender m",
            "title": "Authentication"
        },
        {
            "location": "/md/usage/",
            "text": "Kicking a user\n\n\nWhen a user is kicked from a room (from api/web/rest), all messages that user has sent in a room will be deleted.\n\n\nEvery user in the room will receive an event called \ngn_user_kicked\n with a possible free-text reason field set.\n\n\nBanning a user\n\n\nWhen a user is banned (from api/web/rest), all messages that user has ever sent in any room will be deleted.\n\n\nTODO: who receives what event?",
            "title": "Usage"
        },
        {
            "location": "/md/usage/#kicking-a-user",
            "text": "When a user is kicked from a room (from api/web/rest), all messages that user has sent in a room will be deleted.  Every user in the room will receive an event called  gn_user_kicked  with a possible free-text reason field set.",
            "title": "Kicking a user"
        },
        {
            "location": "/md/usage/#banning-a-user",
            "text": "When a user is banned (from api/web/rest), all messages that user has ever sent in any room will be deleted.  TODO: who receives what event?",
            "title": "Banning a user"
        },
        {
            "location": "/md/api/",
            "text": "Error Codes\n\n\nOK = 200\nUNKNOWN_ERROR = 250\n\nNO_SUCH_USER = 300\nNO_SUCH_CHANNEL = 301\nNO_SUCH_ROOM = 302\nNO_ADMIN_ROOM_FOUND = 303\nNO_USER_IN_SESSION = 304\n\nEMPTY_MESSAGE = 400\nNOT_BASE64 = 401\nUSER_NOT_IN_ROOM = 402\nUSER_IS_BANNED = 403\nROOM_ALREADY_EXISTS = 404\nNOT_ALLOWED = 405\n\nMISSING_ACTOR_ID = 500\nMISSING_OBJECT_ID = 501\nMISSING_TARGET_ID = 502\nMISSING_OBJECT_URL = 503\nMISSING_TARGET_DISPLAY_NAME = 504\nMISSING_ACTOR_URL = 505\nMISSING_OBJECT_CONTENT = 506\n\nINVALID_TARGET_TYPE = 600\nINVALID_ACL_TYPE = 601\nINVALID_ACL_ACTION = 602\nINVALID_ACL_VALUE = 603\nINVALID_STATUS = 604\nINVALID_OBJECT_TYPE = 605\nINVALID_BAN_DURATION = 606\n\n\n\nconnect\n\n\nResponds with event name \"gn_connect\".\n\n\nRequest contains no data.\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\nlogin\n\n\nResponds with event name \"gn_login\".\n\n\nRequest contains:\n\n\n{\n    verb: \"login\",\n    actor: {\n        \"id\": \"<user ID>\",\n        \"displayName\": \"<user name>\",\n        \"attachments\": [\n            {\n                \"objectType\": \"token\",\n                \"content\": \"<user token>\"\n            }\n        ]\n    }\n}\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"id\": \"<server-generated UUID>\",\n        \"published\": \"<server-generated timestamp, RFC3339 format>\",\n        \"actor\": {\n            \"id\": user_id,\n            \"displayName\": b64e(user_name),\n            \"attachments\": [\n                {\n                    \"objectType\": \"room_role\",\n                    \"id\": \"<room UUID>\",\n                    \"content\": \"moderator,owner\"\n                },\n                {\n                    \"objectType\": \"room_role\",\n                    \"id\": \"<room UUID>\",\n                    \"content\": \"owner\"\n                },\n                {\n                    \"objectType\": \"channel_role\",\n                    \"id\": \"<channel UUID>\",\n                    \"content\": \"admin,owner\"\n                },\n                {\n                    \"objectType\": \"global_roles\",\n                    \"content\": \"superuser\"\n                }\n            ]\n        },\n        \"verb\": \"login\"\n    }\n}\n\n\n\nFor the user roles, there will be an ID on the attached object if the role is for a channel or for a room. If it's a\nglobal role there will be no ID on the object. Roles are comma separated if more than one role for a \nroom/channel/global.\n\n\nPossible roles are:\n\n\n\n\nglobal superuser\n\n\nchannel owner\n\n\nchannel admin\n\n\nroom owner\n\n\nroom moderator\n\n\n\n\nlist_channels\n\n\nResponds with event name \"gn_list_channels\".\n\n\nRequest contains:\n\n\n{\n    \"verb\": \"list\"\n}\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"channels\",\n            \"attachments\": [\n                {\n                    \"id\": \"<channel UUID>\",\n                    \"displayName\": \"<channel name>\",\n                    \"attachments\": [\n                        {\n                            \"summary\": \"message\",\n                            \"objectType\": \"membership\",\n                            \"content\": \"1\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"<channel UUID>\",\n                    \"displayName\": \"<channel name>\",\n                    \"attachments\": [\n                        {\n                            \"summary\": \"join\",\n                            \"objectType\": \"gender\",\n                            \"content\": \"f\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"verb\": \"list\"\n    }\n}\n\n\n\nAttachments for each channel describes the ACLs for that channel.\n\n\nlist_rooms\n\n\nGet a list of all rooms for a channel.\n\n\nResponds with event name \"gn_list_rooms\".\n\n\nRequest contains:\n\n\n{\n    \"object\": {\n        \"url\": \"<channel UUID>\"\n    },\n    verb: \"list\"\n}\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"rooms\",\n            \"attachments\": [\n                {\n                    \"id\": \"<room UUID>\",\n                    \"displayName\": \"<room name>\",\n                    \"summary\": <number of users in this room (integer)>,\n                    \"content\": \"moderator,owner\",\n                    \"attachments\": [\n                        {\n                            \"summary\": \"join\",\n                            \"objectType\": \"gender\",\n                            \"content\": \"f\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"<room UUID>\",\n                    \"displayName\": \"<room name>\",\n                    \"summary\": <number of users in this room (integer)>,\n                    \"content\": \"\",\n                    \"attachments\": [\n                        {\n                            \"summary\": \"join\",\n                            \"objectType\": \"gender\",\n                            \"content\": \"f\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"verb\": \"list\"\n    }\n}\n\n\n\nThe \"content\" field on the attachments describe what kind of role you have for that room. If no roles are set then\ncontent will be empty, otherwise it will be a comma separated list of roles. Possible roles for rooms are:\n\n\n\n\nmoderator\n\n\nowner\n\n\n\n\nGlobal roles and roles for channels are returned in the \ngn_login\n event.\n\n\nAttachments for each room describes the ACLs for that room.\n\n\nrequest_admin\n\n\nWhen help is wanted in a room, a user can request for an admin to join and help out. Every channel has an Admin room,\nwhich only admins can see when listing rooms and only admins can join. When a request_admin event is sent to the server\nit will be delivered to the admin room for that channel and the admins in that room can decide what to do.\n\n\nResponds with event name \"gn_request_admin\".\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<room UUID to request help for>\"\n    },\n    \"object\": {\n        \"content\": \"<base64 encoded message that will be delivered to the admin room>\"\n    },\n    \"verb\": \"help\"\n}\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\nThe \"object.content\" could be anything, e.g. a base64 encoded json message with link to backend, extra information, a \nreason text etc. \n\n\nThe event generated to be sent to the admin room is called \"gn_admin_requested\" (see \n\nEvents\n for more information).\n\n\nleave\n\n\nLeave a room.\n\n\nResponds with event name \"gn_leave\".\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<room UUID>\"\n    },\n    verb: \"leave\"\n}\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\nusers_in_room\n\n\nList all users in a room.\n\n\nResponds with event name \"gn_users_in_room\".\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<room UUID>\"\n    },\n    verb: \"list\"\n}\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"users\",\n            \"attachments\": [\n                {\n                    \"id\": \"<user UUID>\",\n                    \"displayName\": \"<user name>\",\n                    \"attachments\": [\n                        {\n                            \"content\": \"NDA=\",\n                            \"objectType\": \"age\"\n                        },\n                        {\n                            \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                            \"objectType\": \"avatar\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"<user UUID>\",\n                    \"displayName\": \"<user name>\",\n                    \"attachments\": [\n                        {\n                            \"content\": \"NDA=\",\n                            \"objectType\": \"age\"\n                        },\n                        {\n                            \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                            \"objectType\": \"avatar\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"verb\": \"list\"\n    }\n}\n\n\n\nhistory\n\n\nTODO: include user UUID as well as user name.\n\n\nWhen joining a room the history will be included in the \"gn_join\" response event. If history is needed for a separate\nreason than the \"history\" event can be used. Can also be used to get history for a private chat with another user, if\n\"target.id\" is set to the user UUID instead of the room UUID.\n\n\nResponds with event name \"gn_history\".\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<room UUID>\"\n    },\n    \"updated\": \"<last read timestamp, if configured in server will return messages since this time>\",\n    \"verb\": \"list\"\n}\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"messages\",\n            \"attachments\": [\n                {\n                    \"author\": {\n                        \"id\": \"<the user id of the sender>\",\n                        \"displayName\": \"<the user name of the sender>\"\n                    },\n                    \"id\": \"<message ID>\",\n                    \"content\": \"<the message content>\",\n                    \"published\": \"<the time it was sent, RFC3339>\"\n                },\n                {\n                    \"author\": {\n                        \"id\": \"<the user id of the sender>\",\n                        \"displayName\": \"<the user name of the sender>\"\n                    },\n                    \"id\": \"<message ID>\",\n                    \"content\": \"<the message content>\",\n                    \"published\": \"<the time it was sent, RFC3339>\"\n                }\n            ]\n        },\n        \"target\": {\n            \"id\": \"<room UUID>\"\n        },\n        \"verb\": \"history\"\n    }\n}\n\n\n\nstatus\n\n\nChange the online status for this user.\n\n\nResponds with \"gn_status\".\n\n\nRequest contains:\n\n\n{\n    \"verb\": \"<one of online/offline/invisible>\"\n}\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\nget_acl\n\n\nGet the permissions (ACL) for a channel or room.\n\n\nResponds with \"gn_get_acl\".\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<room UUID>\",\n        \"objectType\": \"<room/channel>\"\n    },\n    \"verb\": \"get\"\n}\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"target\": {\n            \"id\": \"<room/channel UUID>\",\n            \"objectType\": \"<room/channel>\"\n        },\n        \"object\": {\n            \"objectType\": \"acl\",\n            \"attachments\": [\n                {\n                    \"objectType\": \"<ACL type name>\",\n                    \"content\": \"<ACL value>\",\n                    \"summary\": \"<API action, e.g. join/kick/etc>\"\n                },\n                {\n                    \"objectType\": \"<ACL type name>\",\n                    \"content\": \"<ACL value>\",\n                    \"summary\": \"<API action, e.g. join/kick/etc>\"\n                }\n            ]\n        },\n        \"verb\": \"get\"\n    }\n}\n\n\n\nset_acl\n\n\nUpdate the permissions of a room/channel. If the \"content\" is blank, the ACL with that type for the specified action\nwill be removed. Example \"API actions\" are \"join\", \"create\", \"message\", \"kick\". Example \"permission types\" are \"age\",\n\"gender\", \"membership\".\n\n\nResponds with \"gn_set_acl\".\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<room/channel UUID>\",\n        \"objectType\": \"<room/channel>\"\n    },\n    \"object\": {\n        \"objectType\": \"acl\",\n        \"attachments\": [\n            {\n                \"objectType\": \"<ACL type name>\",\n                \"content\": \"<ACL value>\",\n                \"summary\": \"<API action, e.g. join/kick/etc>\"\n            },\n            {\n                \"objectType\": \"<ACL type name>\",\n                \"content\": \"<ACL value>\",\n                \"summary\": \"<API action, e.g. join/kick/etc>\"\n            }\n        ]\n    },\n    \"verb\": \"set\"\n}\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\ncreate\n\n\nCreate a new room under a channel. The sender of the event will be set as the first owner of the new room.\n\n\nResponds with \"gn_create\".\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"displayName\": \"<name of the new room>\"\n    },\n    \"object\": {\n        \"url\": \"<channel UUID>\"\n    },\n    \"verb\": \"create\"\n}\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"target\": {\n            \"id\": \"<the generated UUID for this room>\",\n            \"displayName\": \"<name of the new room>\"\n        },\n        \"object\": {\n            \"url\": \"<channel UUID>\"\n        },\n        \"verb\": \"create\"\n    }\n}\n\n\n\nIt is also possible to specify ACLs for a room while creating it, but adding \nobject.attachments\n as in the \nset_acl\n \nevent:\n\n\n{\n    \"target\": {\n        \"displayName\": \"<name of the new room>\"\n    },\n    \"object\": {\n        \"url\": \"<channel UUID>\",\n        \"objectType\": \"acl\",\n        \"attachments\": [\n            {\n                \"objectType\": \"<ACL type name>\",\n                \"content\": \"<ACL value>\",\n                \"summary\": \"<API action, e.g. join/kick/etc>\"\n            },\n            {\n                \"objectType\": \"<ACL type name>\",\n                \"content\": \"<ACL value>\",\n                \"summary\": \"<API action, e.g. join/kick/etc>\"\n            }\n        ]\n    },\n    \"verb\": \"create\"\n}\n\n\n\ninvite\n\n\nInvite another user to a room the current user is already in.\n\n\nResponds with \"gn_invite\".\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<UUID of the user to invite>\"\n    },\n    \"actor\": {\n        \"url\": \"<the room UUID the invitation is for>\"\n    },\n    \"verb\": \"invite\"\n}\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\ndelete\n\n\nDelete a message from a room (needs to be superuser, admin for channel, owner of channel, moderator for room or owner \nof room).\n\n\nResponds with \"gn_delete\".\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<UUID of the room to delete from>\"\n    },\n    \"object\": {\n        \"id\": \"<UUID of the message to delete>\"\n    },\n    \"verb\": \"delete\"\n}\n\n\n\nkick\n\n\nKick a user from a room.\n\n\nResponds with \"gn_kick\".\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<UUID of the room to kick from>\"\n    },\n    \"object\": {\n        \"id\": \"<UUID of the user to kick>\"\n    },\n    \"verb\": \"kick\"\n}\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\nban\n\n\nBan a user from a room for a given amount of time.\n\n\nResponds with \"gn_ban\".\n\n\nRequest contains:\n\n\n{\n    \"target\": {\n        \"id\": \"<UUID of the room/channel to ban from>\",\n        \"objectType\": \"<room/channel/global>\"\n    },\n    \"object\": {\n        \"id\": \"<UUID of the user to ban>\",\n        \"summary\": \"<ban duration, an integer suffixed with one of [d, h, m, s]>\"\n    },\n    \"verb\": \"kick\"\n}\n\n\n\nIf banning a used in a room, set objectType to \"room\" and target.id to the uuid of the room. If banning from a channel,\nset objectType to \"channel\" and target.id to the uuid of the channel. If banning globally, set objectType to \"global\"\nand skip target.id.\n\n\nSummary is the duration of the ban. It's a number with a suffix d, h, m or s, meaning days, hours, minutes and seconds.\nOnly one suffix can be used. E.g.:\n\n\n\n\n5m (ban for five minutes),\n\n\n3600s (ban for 3600 seconds, same as 1h),\n\n\n365d (ban for one year).\n\n\n\n\nIt's not possible to permanently ban a user, but you can set a very large duration for the same effect. The only\nrestriction is that the date when the ban ends (utcnow()+duration) must be before the year 10000 (date lib restriction).\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\nmessage\n\n\nSend a message to a \"room\" UUID (can be the user UUID or an actual room UUID).\n\n\nResponds with event name \"gn_message\".\n\n\nRequest contains:\n\n\n{\n    verb: \"send\",\n    target: {\n        id: \"<room/user ID>\",\n        objectType: \"<room/private>\"\n    },\n    object: {\n        content: \"<the message, base64 encoded>\",\n    }\n}\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"id\": \"c42ebf01-3d50-4f27-a345-4ed213be045d\",\n        \"published\": \"2016-10-07T10:45:34Z\",\n        \"actor\": {\n            \"id\": \"<your user ID>\",\n            \"displayName\": \"<your user name>\"\n        },\n        \"verb\": \"send\",\n        \"target\": {\n            \"id\": \"<room ID>\",\n            \"displayName\": \"<room name>\"\n        },\n        \"object\": {\n            \"content\": \"<the message>\",\n            \"displayName\": \"<the channel name>\",\n            \"url\": \"<the channel id>\",\n            \"objectType\": \"<room/private>\"\n        }\n    }\n}\n\n\n\nThe response will send the same ActivityStreams as was in the request, with the addition of a server generated ID (uuid)\nand the \"published\" field set to the time the server received the request (in RFC3339 format).\n\n\nremove_room\n\n\nResponse with the event name \"gn_remove_room\".\n\n\nRequest contains:\n\n\n{\n    \"verb\": \"join\",\n    \"target\": {\n        \"id\": \"<room ID>\"\n    }\n}\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"target\": {\n            \"id\": \"<room uuid>\",\n            \"displayName\": \"<room name in base64>\",\n            \"objectType\": \"room\"\n        },\n        \"id\": \"c42ebf01-3d50-4f27-a345-4ed213be045d\",\n        \"published\": \"2016-10-07T10:45:34Z\",\n        \"verb\": \"removed\"\n    }\n}\n\n\n\nreport\n\n\nNo response.\n\n\nRequest contains:\n\n\n{\n    \"verb\": \"report\",\n    \"object\": {\n        \"id\": \"<uuid of message>\",\n        \"content\": \"<the actual message to report, base64>\",\n        \"summary\": \"<optional reason text, base64>\"\n    },\n    \"target\": {\n        \"id\": \"<user ID to report>\"\n    }\n}\n\n\n\nA report will be sent to both the admin room and as an external event published on the MQ.\n\n\njoin\n\n\nResponds with the event name \"gn_join\".\n\n\nRequest contains:\n\n\n{\n    \"verb\": \"join\",\n    \"target\": {\n        \"id\": \"<room ID>\"\n    }\n}\n\n\n\nResponse data if successful:\n\n\n{\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"room\",\n            \"attachments\": [\n                {\n                    \"objectType\": \"history\",\n                    \"attachments\": [\n                        {\n                            \"author\": {\n                                \"id\": \"<the user id of the sender>\",\n                                \"displayName\": \"<the user name of the sender>\"\n                            },\n                            \"id\": \"<message ID>\",\n                            \"content\": \"<the message content>\",\n                            \"published\": \"<the time it was sent, RFC3339>\"\n                        },\n                        {\n                            \"author\": {\n                                \"id\": \"<the user id of the sender>\",\n                                \"displayName\": \"<the user name of the sender>\"\n                            },\n                            \"id\": \"<message ID>\",\n                            \"content\": \"<the message content>\",\n                            \"published\": \"<the time it was sent, RFC3339>\"\n                        }\n                    ]\n                },\n                {\n                    \"objectType\": \"owner\",\n                    \"attachments\": [\n                        {\n                            \"id\": \"<owner's user ID>\",\n                            \"displayName\": \"<owner's user name>\",\n                        },\n                        {\n                            \"id\": \"<owner's user ID>\",\n                            \"displayName\": \"<owner's user name>\",\n                        }\n                    ]\n                },\n                {\n                    \"objectType\": \"acl\",\n                    \"attachments\": [\n                        {\n                            \"objectType\": \"<ACL type name>\",\n                            \"content\": \"<ACL value>\",\n                        },\n                        {\n                            \"objectType\": \"<ACL type name>\",\n                            \"content\": \"<ACL value>\",\n                        }\n                    ]\n                },\n                {\n                    \"objectType\": \"user\",\n                    \"attachments\": [\n                        {\n                            \"id\": \"<user ID of a user in the room>\",\n                            \"displayName\": \"<user name of a user in the room>\",\n                        },\n                        {\n                            \"id\": \"<user ID of a user in the room>\",\n                            \"displayName\": \"<user name of a user in the room>\",\n                        }\n                    ]\n                },\n            ]\n        },\n        \"verb\": \"join\",\n        \"target\": {\n            \"id\": \"<the room ID that the user joined>\"\n        }\n    }\n}",
            "title": "API"
        },
        {
            "location": "/md/api/#error-codes",
            "text": "OK = 200\nUNKNOWN_ERROR = 250\n\nNO_SUCH_USER = 300\nNO_SUCH_CHANNEL = 301\nNO_SUCH_ROOM = 302\nNO_ADMIN_ROOM_FOUND = 303\nNO_USER_IN_SESSION = 304\n\nEMPTY_MESSAGE = 400\nNOT_BASE64 = 401\nUSER_NOT_IN_ROOM = 402\nUSER_IS_BANNED = 403\nROOM_ALREADY_EXISTS = 404\nNOT_ALLOWED = 405\n\nMISSING_ACTOR_ID = 500\nMISSING_OBJECT_ID = 501\nMISSING_TARGET_ID = 502\nMISSING_OBJECT_URL = 503\nMISSING_TARGET_DISPLAY_NAME = 504\nMISSING_ACTOR_URL = 505\nMISSING_OBJECT_CONTENT = 506\n\nINVALID_TARGET_TYPE = 600\nINVALID_ACL_TYPE = 601\nINVALID_ACL_ACTION = 602\nINVALID_ACL_VALUE = 603\nINVALID_STATUS = 604\nINVALID_OBJECT_TYPE = 605\nINVALID_BAN_DURATION = 606",
            "title": "Error Codes"
        },
        {
            "location": "/md/api/#connect",
            "text": "Responds with event name \"gn_connect\".  Request contains no data.  Response data if successful:  {\n    \"status_code\": 200\n}",
            "title": "connect"
        },
        {
            "location": "/md/api/#login",
            "text": "Responds with event name \"gn_login\".  Request contains:  {\n    verb: \"login\",\n    actor: {\n        \"id\": \"<user ID>\",\n        \"displayName\": \"<user name>\",\n        \"attachments\": [\n            {\n                \"objectType\": \"token\",\n                \"content\": \"<user token>\"\n            }\n        ]\n    }\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"id\": \"<server-generated UUID>\",\n        \"published\": \"<server-generated timestamp, RFC3339 format>\",\n        \"actor\": {\n            \"id\": user_id,\n            \"displayName\": b64e(user_name),\n            \"attachments\": [\n                {\n                    \"objectType\": \"room_role\",\n                    \"id\": \"<room UUID>\",\n                    \"content\": \"moderator,owner\"\n                },\n                {\n                    \"objectType\": \"room_role\",\n                    \"id\": \"<room UUID>\",\n                    \"content\": \"owner\"\n                },\n                {\n                    \"objectType\": \"channel_role\",\n                    \"id\": \"<channel UUID>\",\n                    \"content\": \"admin,owner\"\n                },\n                {\n                    \"objectType\": \"global_roles\",\n                    \"content\": \"superuser\"\n                }\n            ]\n        },\n        \"verb\": \"login\"\n    }\n}  For the user roles, there will be an ID on the attached object if the role is for a channel or for a room. If it's a\nglobal role there will be no ID on the object. Roles are comma separated if more than one role for a \nroom/channel/global.  Possible roles are:   global superuser  channel owner  channel admin  room owner  room moderator",
            "title": "login"
        },
        {
            "location": "/md/api/#list_channels",
            "text": "Responds with event name \"gn_list_channels\".  Request contains:  {\n    \"verb\": \"list\"\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"channels\",\n            \"attachments\": [\n                {\n                    \"id\": \"<channel UUID>\",\n                    \"displayName\": \"<channel name>\",\n                    \"attachments\": [\n                        {\n                            \"summary\": \"message\",\n                            \"objectType\": \"membership\",\n                            \"content\": \"1\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"<channel UUID>\",\n                    \"displayName\": \"<channel name>\",\n                    \"attachments\": [\n                        {\n                            \"summary\": \"join\",\n                            \"objectType\": \"gender\",\n                            \"content\": \"f\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"verb\": \"list\"\n    }\n}  Attachments for each channel describes the ACLs for that channel.",
            "title": "list_channels"
        },
        {
            "location": "/md/api/#list_rooms",
            "text": "Get a list of all rooms for a channel.  Responds with event name \"gn_list_rooms\".  Request contains:  {\n    \"object\": {\n        \"url\": \"<channel UUID>\"\n    },\n    verb: \"list\"\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"rooms\",\n            \"attachments\": [\n                {\n                    \"id\": \"<room UUID>\",\n                    \"displayName\": \"<room name>\",\n                    \"summary\": <number of users in this room (integer)>,\n                    \"content\": \"moderator,owner\",\n                    \"attachments\": [\n                        {\n                            \"summary\": \"join\",\n                            \"objectType\": \"gender\",\n                            \"content\": \"f\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"<room UUID>\",\n                    \"displayName\": \"<room name>\",\n                    \"summary\": <number of users in this room (integer)>,\n                    \"content\": \"\",\n                    \"attachments\": [\n                        {\n                            \"summary\": \"join\",\n                            \"objectType\": \"gender\",\n                            \"content\": \"f\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"verb\": \"list\"\n    }\n}  The \"content\" field on the attachments describe what kind of role you have for that room. If no roles are set then\ncontent will be empty, otherwise it will be a comma separated list of roles. Possible roles for rooms are:   moderator  owner   Global roles and roles for channels are returned in the  gn_login  event.  Attachments for each room describes the ACLs for that room.",
            "title": "list_rooms"
        },
        {
            "location": "/md/api/#request_admin",
            "text": "When help is wanted in a room, a user can request for an admin to join and help out. Every channel has an Admin room,\nwhich only admins can see when listing rooms and only admins can join. When a request_admin event is sent to the server\nit will be delivered to the admin room for that channel and the admins in that room can decide what to do.  Responds with event name \"gn_request_admin\".  Request contains:  {\n    \"target\": {\n        \"id\": \"<room UUID to request help for>\"\n    },\n    \"object\": {\n        \"content\": \"<base64 encoded message that will be delivered to the admin room>\"\n    },\n    \"verb\": \"help\"\n}  Response data if successful:  {\n    \"status_code\": 200\n}  The \"object.content\" could be anything, e.g. a base64 encoded json message with link to backend, extra information, a \nreason text etc.   The event generated to be sent to the admin room is called \"gn_admin_requested\" (see  Events  for more information).",
            "title": "request_admin"
        },
        {
            "location": "/md/api/#leave",
            "text": "Leave a room.  Responds with event name \"gn_leave\".  Request contains:  {\n    \"target\": {\n        \"id\": \"<room UUID>\"\n    },\n    verb: \"leave\"\n}  Response data if successful:  {\n    \"status_code\": 200\n}",
            "title": "leave"
        },
        {
            "location": "/md/api/#users_in_room",
            "text": "List all users in a room.  Responds with event name \"gn_users_in_room\".  Request contains:  {\n    \"target\": {\n        \"id\": \"<room UUID>\"\n    },\n    verb: \"list\"\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"users\",\n            \"attachments\": [\n                {\n                    \"id\": \"<user UUID>\",\n                    \"displayName\": \"<user name>\",\n                    \"attachments\": [\n                        {\n                            \"content\": \"NDA=\",\n                            \"objectType\": \"age\"\n                        },\n                        {\n                            \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                            \"objectType\": \"avatar\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"<user UUID>\",\n                    \"displayName\": \"<user name>\",\n                    \"attachments\": [\n                        {\n                            \"content\": \"NDA=\",\n                            \"objectType\": \"age\"\n                        },\n                        {\n                            \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                            \"objectType\": \"avatar\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"verb\": \"list\"\n    }\n}",
            "title": "users_in_room"
        },
        {
            "location": "/md/api/#history",
            "text": "TODO: include user UUID as well as user name.  When joining a room the history will be included in the \"gn_join\" response event. If history is needed for a separate\nreason than the \"history\" event can be used. Can also be used to get history for a private chat with another user, if\n\"target.id\" is set to the user UUID instead of the room UUID.  Responds with event name \"gn_history\".  Request contains:  {\n    \"target\": {\n        \"id\": \"<room UUID>\"\n    },\n    \"updated\": \"<last read timestamp, if configured in server will return messages since this time>\",\n    \"verb\": \"list\"\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"messages\",\n            \"attachments\": [\n                {\n                    \"author\": {\n                        \"id\": \"<the user id of the sender>\",\n                        \"displayName\": \"<the user name of the sender>\"\n                    },\n                    \"id\": \"<message ID>\",\n                    \"content\": \"<the message content>\",\n                    \"published\": \"<the time it was sent, RFC3339>\"\n                },\n                {\n                    \"author\": {\n                        \"id\": \"<the user id of the sender>\",\n                        \"displayName\": \"<the user name of the sender>\"\n                    },\n                    \"id\": \"<message ID>\",\n                    \"content\": \"<the message content>\",\n                    \"published\": \"<the time it was sent, RFC3339>\"\n                }\n            ]\n        },\n        \"target\": {\n            \"id\": \"<room UUID>\"\n        },\n        \"verb\": \"history\"\n    }\n}",
            "title": "history"
        },
        {
            "location": "/md/api/#status",
            "text": "Change the online status for this user.  Responds with \"gn_status\".  Request contains:  {\n    \"verb\": \"<one of online/offline/invisible>\"\n}  Response data if successful:  {\n    \"status_code\": 200\n}",
            "title": "status"
        },
        {
            "location": "/md/api/#get_acl",
            "text": "Get the permissions (ACL) for a channel or room.  Responds with \"gn_get_acl\".  Request contains:  {\n    \"target\": {\n        \"id\": \"<room UUID>\",\n        \"objectType\": \"<room/channel>\"\n    },\n    \"verb\": \"get\"\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"target\": {\n            \"id\": \"<room/channel UUID>\",\n            \"objectType\": \"<room/channel>\"\n        },\n        \"object\": {\n            \"objectType\": \"acl\",\n            \"attachments\": [\n                {\n                    \"objectType\": \"<ACL type name>\",\n                    \"content\": \"<ACL value>\",\n                    \"summary\": \"<API action, e.g. join/kick/etc>\"\n                },\n                {\n                    \"objectType\": \"<ACL type name>\",\n                    \"content\": \"<ACL value>\",\n                    \"summary\": \"<API action, e.g. join/kick/etc>\"\n                }\n            ]\n        },\n        \"verb\": \"get\"\n    }\n}",
            "title": "get_acl"
        },
        {
            "location": "/md/api/#set_acl",
            "text": "Update the permissions of a room/channel. If the \"content\" is blank, the ACL with that type for the specified action\nwill be removed. Example \"API actions\" are \"join\", \"create\", \"message\", \"kick\". Example \"permission types\" are \"age\",\n\"gender\", \"membership\".  Responds with \"gn_set_acl\".  Request contains:  {\n    \"target\": {\n        \"id\": \"<room/channel UUID>\",\n        \"objectType\": \"<room/channel>\"\n    },\n    \"object\": {\n        \"objectType\": \"acl\",\n        \"attachments\": [\n            {\n                \"objectType\": \"<ACL type name>\",\n                \"content\": \"<ACL value>\",\n                \"summary\": \"<API action, e.g. join/kick/etc>\"\n            },\n            {\n                \"objectType\": \"<ACL type name>\",\n                \"content\": \"<ACL value>\",\n                \"summary\": \"<API action, e.g. join/kick/etc>\"\n            }\n        ]\n    },\n    \"verb\": \"set\"\n}  Response data if successful:  {\n    \"status_code\": 200\n}",
            "title": "set_acl"
        },
        {
            "location": "/md/api/#create",
            "text": "Create a new room under a channel. The sender of the event will be set as the first owner of the new room.  Responds with \"gn_create\".  Request contains:  {\n    \"target\": {\n        \"displayName\": \"<name of the new room>\"\n    },\n    \"object\": {\n        \"url\": \"<channel UUID>\"\n    },\n    \"verb\": \"create\"\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"target\": {\n            \"id\": \"<the generated UUID for this room>\",\n            \"displayName\": \"<name of the new room>\"\n        },\n        \"object\": {\n            \"url\": \"<channel UUID>\"\n        },\n        \"verb\": \"create\"\n    }\n}  It is also possible to specify ACLs for a room while creating it, but adding  object.attachments  as in the  set_acl  \nevent:  {\n    \"target\": {\n        \"displayName\": \"<name of the new room>\"\n    },\n    \"object\": {\n        \"url\": \"<channel UUID>\",\n        \"objectType\": \"acl\",\n        \"attachments\": [\n            {\n                \"objectType\": \"<ACL type name>\",\n                \"content\": \"<ACL value>\",\n                \"summary\": \"<API action, e.g. join/kick/etc>\"\n            },\n            {\n                \"objectType\": \"<ACL type name>\",\n                \"content\": \"<ACL value>\",\n                \"summary\": \"<API action, e.g. join/kick/etc>\"\n            }\n        ]\n    },\n    \"verb\": \"create\"\n}",
            "title": "create"
        },
        {
            "location": "/md/api/#invite",
            "text": "Invite another user to a room the current user is already in.  Responds with \"gn_invite\".  Request contains:  {\n    \"target\": {\n        \"id\": \"<UUID of the user to invite>\"\n    },\n    \"actor\": {\n        \"url\": \"<the room UUID the invitation is for>\"\n    },\n    \"verb\": \"invite\"\n}  Response data if successful:  {\n    \"status_code\": 200\n}",
            "title": "invite"
        },
        {
            "location": "/md/api/#delete",
            "text": "Delete a message from a room (needs to be superuser, admin for channel, owner of channel, moderator for room or owner \nof room).  Responds with \"gn_delete\".  Request contains:  {\n    \"target\": {\n        \"id\": \"<UUID of the room to delete from>\"\n    },\n    \"object\": {\n        \"id\": \"<UUID of the message to delete>\"\n    },\n    \"verb\": \"delete\"\n}",
            "title": "delete"
        },
        {
            "location": "/md/api/#kick",
            "text": "Kick a user from a room.  Responds with \"gn_kick\".  Request contains:  {\n    \"target\": {\n        \"id\": \"<UUID of the room to kick from>\"\n    },\n    \"object\": {\n        \"id\": \"<UUID of the user to kick>\"\n    },\n    \"verb\": \"kick\"\n}  Response data if successful:  {\n    \"status_code\": 200\n}",
            "title": "kick"
        },
        {
            "location": "/md/api/#ban",
            "text": "Ban a user from a room for a given amount of time.  Responds with \"gn_ban\".  Request contains:  {\n    \"target\": {\n        \"id\": \"<UUID of the room/channel to ban from>\",\n        \"objectType\": \"<room/channel/global>\"\n    },\n    \"object\": {\n        \"id\": \"<UUID of the user to ban>\",\n        \"summary\": \"<ban duration, an integer suffixed with one of [d, h, m, s]>\"\n    },\n    \"verb\": \"kick\"\n}  If banning a used in a room, set objectType to \"room\" and target.id to the uuid of the room. If banning from a channel,\nset objectType to \"channel\" and target.id to the uuid of the channel. If banning globally, set objectType to \"global\"\nand skip target.id.  Summary is the duration of the ban. It's a number with a suffix d, h, m or s, meaning days, hours, minutes and seconds.\nOnly one suffix can be used. E.g.:   5m (ban for five minutes),  3600s (ban for 3600 seconds, same as 1h),  365d (ban for one year).   It's not possible to permanently ban a user, but you can set a very large duration for the same effect. The only\nrestriction is that the date when the ban ends (utcnow()+duration) must be before the year 10000 (date lib restriction).  Response data if successful:  {\n    \"status_code\": 200\n}",
            "title": "ban"
        },
        {
            "location": "/md/api/#message",
            "text": "Send a message to a \"room\" UUID (can be the user UUID or an actual room UUID).  Responds with event name \"gn_message\".  Request contains:  {\n    verb: \"send\",\n    target: {\n        id: \"<room/user ID>\",\n        objectType: \"<room/private>\"\n    },\n    object: {\n        content: \"<the message, base64 encoded>\",\n    }\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"id\": \"c42ebf01-3d50-4f27-a345-4ed213be045d\",\n        \"published\": \"2016-10-07T10:45:34Z\",\n        \"actor\": {\n            \"id\": \"<your user ID>\",\n            \"displayName\": \"<your user name>\"\n        },\n        \"verb\": \"send\",\n        \"target\": {\n            \"id\": \"<room ID>\",\n            \"displayName\": \"<room name>\"\n        },\n        \"object\": {\n            \"content\": \"<the message>\",\n            \"displayName\": \"<the channel name>\",\n            \"url\": \"<the channel id>\",\n            \"objectType\": \"<room/private>\"\n        }\n    }\n}  The response will send the same ActivityStreams as was in the request, with the addition of a server generated ID (uuid)\nand the \"published\" field set to the time the server received the request (in RFC3339 format).",
            "title": "message"
        },
        {
            "location": "/md/api/#remove_room",
            "text": "Response with the event name \"gn_remove_room\".  Request contains:  {\n    \"verb\": \"join\",\n    \"target\": {\n        \"id\": \"<room ID>\"\n    }\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"target\": {\n            \"id\": \"<room uuid>\",\n            \"displayName\": \"<room name in base64>\",\n            \"objectType\": \"room\"\n        },\n        \"id\": \"c42ebf01-3d50-4f27-a345-4ed213be045d\",\n        \"published\": \"2016-10-07T10:45:34Z\",\n        \"verb\": \"removed\"\n    }\n}",
            "title": "remove_room"
        },
        {
            "location": "/md/api/#report",
            "text": "No response.  Request contains:  {\n    \"verb\": \"report\",\n    \"object\": {\n        \"id\": \"<uuid of message>\",\n        \"content\": \"<the actual message to report, base64>\",\n        \"summary\": \"<optional reason text, base64>\"\n    },\n    \"target\": {\n        \"id\": \"<user ID to report>\"\n    }\n}  A report will be sent to both the admin room and as an external event published on the MQ.",
            "title": "report"
        },
        {
            "location": "/md/api/#join",
            "text": "Responds with the event name \"gn_join\".  Request contains:  {\n    \"verb\": \"join\",\n    \"target\": {\n        \"id\": \"<room ID>\"\n    }\n}  Response data if successful:  {\n    \"status_code\": 200,\n    \"data\": {\n        \"object\": {\n            \"objectType\": \"room\",\n            \"attachments\": [\n                {\n                    \"objectType\": \"history\",\n                    \"attachments\": [\n                        {\n                            \"author\": {\n                                \"id\": \"<the user id of the sender>\",\n                                \"displayName\": \"<the user name of the sender>\"\n                            },\n                            \"id\": \"<message ID>\",\n                            \"content\": \"<the message content>\",\n                            \"published\": \"<the time it was sent, RFC3339>\"\n                        },\n                        {\n                            \"author\": {\n                                \"id\": \"<the user id of the sender>\",\n                                \"displayName\": \"<the user name of the sender>\"\n                            },\n                            \"id\": \"<message ID>\",\n                            \"content\": \"<the message content>\",\n                            \"published\": \"<the time it was sent, RFC3339>\"\n                        }\n                    ]\n                },\n                {\n                    \"objectType\": \"owner\",\n                    \"attachments\": [\n                        {\n                            \"id\": \"<owner's user ID>\",\n                            \"displayName\": \"<owner's user name>\",\n                        },\n                        {\n                            \"id\": \"<owner's user ID>\",\n                            \"displayName\": \"<owner's user name>\",\n                        }\n                    ]\n                },\n                {\n                    \"objectType\": \"acl\",\n                    \"attachments\": [\n                        {\n                            \"objectType\": \"<ACL type name>\",\n                            \"content\": \"<ACL value>\",\n                        },\n                        {\n                            \"objectType\": \"<ACL type name>\",\n                            \"content\": \"<ACL value>\",\n                        }\n                    ]\n                },\n                {\n                    \"objectType\": \"user\",\n                    \"attachments\": [\n                        {\n                            \"id\": \"<user ID of a user in the room>\",\n                            \"displayName\": \"<user name of a user in the room>\",\n                        },\n                        {\n                            \"id\": \"<user ID of a user in the room>\",\n                            \"displayName\": \"<user name of a user in the room>\",\n                        }\n                    ]\n                },\n            ]\n        },\n        \"verb\": \"join\",\n        \"target\": {\n            \"id\": \"<the room ID that the user joined>\"\n        }\n    }\n}",
            "title": "join"
        },
        {
            "location": "/md/events/",
            "text": "Message deleted\n\n\nWhen an admin/mod/etc. deletes a message from a room, everyone on that room will receive an event with the name \n\ngn_message_deleted\n so they can remove it locally as well.\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"object\": {\n        \"id\": \"<UUID of the message that was deleted>\"\n    },\n    \"target\": {\n        \"id\": \"<UUID of the room the message was deleted in>\"\n    },\n    \"verb\": \"delete\",\n    \"actor\": {\n        \"id\": \"<ID fo the user who deleted the message>\",\n        \"displayName\": \"<name of the user, base64>\"\n    }\n}\n\n\n\nMessage received\n\n\nWhen user A receives a private message, or a message from a room that user A is in, the event \ngn_message\n will be sent\nto user A with the following content:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of the sender>\",\n        \"displayName\": \"<name of the sender>\"\n    },\n    \"verb\": \"send\",\n    \"target\": {\n        \"id\": \"<UUID of the room, or this user's UUID if private msg>\",\n        \"displayName\": \"<name of the room, or target user name if private msg>\",\n        \"objectType\": \"<room/private>\"\n    },\n    \"object\": {\n        \"content\": \"<the message body>\",\n        \"displayName\": \"<the name of the channel, or empty if private msg>\",\n        \"url\": \"<UUID of the channel for this room, or empty if private msg>\"\n    }\n}\n\n\n\nAdmin presence requested\n\n\nWhen someone requests the presence of an admin in a room all users in the Admin room for that channel will receive an\nevent called \ngn_admin_requested\n containing the following:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of user requesting>\",\n        \"displayName\": \"<name of the user requesting>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"verb\": \"help\",\n    \"object\": {\n        \"content\": \"<base64 encoded message>\"\n    },\n    \"target\": {\n        \"id\": \"<UUID of the room the help was requested for>\",\n        \"displayName\": \"<name of the room>\"\n    }\n}\n\n\n\nA room was removed\n\n\nWhen a room is removed by an admin/owner an event called \ngn_room_removed\n will be sent to everyone on the server (to\nkeep the room list in sync on client side):\n\n\n{\n    \"actor\": {\n        \"id\": \"<user ID who removed the room>\",\n        \"displayName\": \"<name of the user who removed the room, in base64>\"\n    },\n    \"target\": {\n        \"id\": \"<room uuid>\",\n        \"displayName\": \"<room name in base64>\",\n        \"objectType\": \"room\"\n    },\n    \"object\": {\n        \"content\": \"<an optional reason, in base64>\"\n    },\n    \"id\": \"c42ebf01-3d50-4f27-a345-4ed213be045d\",\n    \"published\": \"2016-10-07T10:45:34Z\",\n    \"verb\": \"removed\"\n}\n\n\n\nInvitation received\n\n\nWhen user B invites user A to join room X, the event \ngn_invitation\n will be sent to user A with the following content:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of user B>\",\n        \"displayName\": \"<name of user B>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"verb\": \"invite\",\n    \"object\": {\n        \"url\": \"<UUID of the channel for room X>\",\n        \"displayName\": \"<name of the channel for room X>\"\n    },\n    \"target\": {\n        \"id\": \"<UUID of the room>\",\n        \"displayName\": \"<name of the room>\"\n    }\n}\n\n\n\nAnother user joins the room\n\n\nIf user A is in room X, and another user B joins room X, the server will send an event called \ngn_user_joined\n to user A\nwith the following content:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<user B's UUID>\",\n        \"displayName\": \"<name of user B>\",\n        \"image\": {\n            \"url\": \"<user B's image url>\"\n        },\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"target\": {\n        \"id\": \"<uuid of the room>\",\n        \"displayName\": \"<name of the room>\"\n    },\n    \"verb\": \"join\"\n}\n\n\n\nAnother user leaves room\n\n\nWhen user A is in room X, and another user B leaves room X, the sever will send an event called \ngn_user_left\n to user A\nwith the following content:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<user B's UUID>\",\n        \"displayName\": \"<name of user B>\",\n    },\n    \"target\": {\n        \"id\": \"<uuid of the room>\",\n        \"displayName\": \"<name of the room>\"\n    },\n    \"verb\": \"leave\"\n}\n\n\n\nAnother user disconnects\n\n\nIf user A is in any room that user B is in, and user B disconnects from the chat server, an event called\n\ngn_user_disconnected\n will be sent to user A with the following content:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<user B's UUID>\",\n        \"displayName\": \"<name of user B>\",\n    },\n    \"verb\": 'disconnect'\n}\n\n\n\nYou were banned\n\n\nIf you are banned, either in a room, a channel or globally, you will receive the following event named \ngn_banned\n:\n\n\n{\n    \"actor\": {\n        \"id\": \"<ID of the one who banned you>\",\n        \"displayName\": \"<username of the one who banned you, in base64>\"\n    },\n    \"object\": {\n        \"id\": \"<your user ID>\",\n        \"displayName\": \"<your username in base64>\",\n        \"summary\": \"30s\",\n        \"updated\": \"2017-02-15T09:11:52Z\",\n        \"content\": \"<the reason for the ban>\"\n    },\n    \"target\": {\n        \"id\": \"<room/channel uuid>\",\n        \"displayName\": \"<room/channel name, in base64>\",\n        \"objectType\": \"<room/channel/global>\"\n    },\n    \"verb\": \"ban\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\n\n\ntarget.id and target.displayName will not be present if target.objectType is \"global\",\n\n\nobject.summary is the duration of the ban, e.g. 30s, 2h, 7d etc.,\n\n\nobject.updated is the timestamp when the ban will expire, in UTC,\n\n\nobject.content is the reason for the ban, but if no reason is given by the banned, this field will not be present.\n\n\n\n\nA new room is created\n\n\nWhen a new room is created in a channel that user A is in, an event called \ngn_room_created\n will be sent to user A with\nthe following content:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of user who created the room>\",\n        \"displayName\": \"<name of the user who created the room>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"object\": {\n        \"url\": \"<UUID of the channel for this room>\"\n    },\n    \"target\": {\n        \"id\": \"<UUID of the new room>\",\n        \"displayName\": \"<name of the new room>\"\n    },\n    \"verb\": \"create\"\n}\n\n\n\nA user is kicked from a room\n\n\nWhen a user is kicked from a room, an event will be sent to all users in that room (except the kicked user), called \n\ngn_user_kicked\n, with the following content:\n\n\n{\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of the kicker>\",\n        \"displayName\": \"<name of the kicker>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"object\": {\n        \"id\": \"<UUID of the kicked user>\",\n        \"displayName\": \"<name of the kicked user>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"target\": {\n        \"id\": \"<UUID of the room the user was kicked from>\",\n        \"displayName\": \"<name of the room the user was kicked from>\"\n    },\n    \"verb\": \"kick\"\n}\n\n\n\nA user is banned\n\n\nTODO: currently the user will be banned, but the \"kicked\" event will be broadcasted to relevant users. There's currently\nno \"banned\" event for this.",
            "title": "Events"
        },
        {
            "location": "/md/events/#message-deleted",
            "text": "When an admin/mod/etc. deletes a message from a room, everyone on that room will receive an event with the name  gn_message_deleted  so they can remove it locally as well.  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"object\": {\n        \"id\": \"<UUID of the message that was deleted>\"\n    },\n    \"target\": {\n        \"id\": \"<UUID of the room the message was deleted in>\"\n    },\n    \"verb\": \"delete\",\n    \"actor\": {\n        \"id\": \"<ID fo the user who deleted the message>\",\n        \"displayName\": \"<name of the user, base64>\"\n    }\n}",
            "title": "Message deleted"
        },
        {
            "location": "/md/events/#message-received",
            "text": "When user A receives a private message, or a message from a room that user A is in, the event  gn_message  will be sent\nto user A with the following content:  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of the sender>\",\n        \"displayName\": \"<name of the sender>\"\n    },\n    \"verb\": \"send\",\n    \"target\": {\n        \"id\": \"<UUID of the room, or this user's UUID if private msg>\",\n        \"displayName\": \"<name of the room, or target user name if private msg>\",\n        \"objectType\": \"<room/private>\"\n    },\n    \"object\": {\n        \"content\": \"<the message body>\",\n        \"displayName\": \"<the name of the channel, or empty if private msg>\",\n        \"url\": \"<UUID of the channel for this room, or empty if private msg>\"\n    }\n}",
            "title": "Message received"
        },
        {
            "location": "/md/events/#admin-presence-requested",
            "text": "When someone requests the presence of an admin in a room all users in the Admin room for that channel will receive an\nevent called  gn_admin_requested  containing the following:  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of user requesting>\",\n        \"displayName\": \"<name of the user requesting>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"verb\": \"help\",\n    \"object\": {\n        \"content\": \"<base64 encoded message>\"\n    },\n    \"target\": {\n        \"id\": \"<UUID of the room the help was requested for>\",\n        \"displayName\": \"<name of the room>\"\n    }\n}",
            "title": "Admin presence requested"
        },
        {
            "location": "/md/events/#a-room-was-removed",
            "text": "When a room is removed by an admin/owner an event called  gn_room_removed  will be sent to everyone on the server (to\nkeep the room list in sync on client side):  {\n    \"actor\": {\n        \"id\": \"<user ID who removed the room>\",\n        \"displayName\": \"<name of the user who removed the room, in base64>\"\n    },\n    \"target\": {\n        \"id\": \"<room uuid>\",\n        \"displayName\": \"<room name in base64>\",\n        \"objectType\": \"room\"\n    },\n    \"object\": {\n        \"content\": \"<an optional reason, in base64>\"\n    },\n    \"id\": \"c42ebf01-3d50-4f27-a345-4ed213be045d\",\n    \"published\": \"2016-10-07T10:45:34Z\",\n    \"verb\": \"removed\"\n}",
            "title": "A room was removed"
        },
        {
            "location": "/md/events/#invitation-received",
            "text": "When user B invites user A to join room X, the event  gn_invitation  will be sent to user A with the following content:  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of user B>\",\n        \"displayName\": \"<name of user B>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"verb\": \"invite\",\n    \"object\": {\n        \"url\": \"<UUID of the channel for room X>\",\n        \"displayName\": \"<name of the channel for room X>\"\n    },\n    \"target\": {\n        \"id\": \"<UUID of the room>\",\n        \"displayName\": \"<name of the room>\"\n    }\n}",
            "title": "Invitation received"
        },
        {
            "location": "/md/events/#another-user-joins-the-room",
            "text": "If user A is in room X, and another user B joins room X, the server will send an event called  gn_user_joined  to user A\nwith the following content:  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<user B's UUID>\",\n        \"displayName\": \"<name of user B>\",\n        \"image\": {\n            \"url\": \"<user B's image url>\"\n        },\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"target\": {\n        \"id\": \"<uuid of the room>\",\n        \"displayName\": \"<name of the room>\"\n    },\n    \"verb\": \"join\"\n}",
            "title": "Another user joins the room"
        },
        {
            "location": "/md/events/#another-user-leaves-room",
            "text": "When user A is in room X, and another user B leaves room X, the sever will send an event called  gn_user_left  to user A\nwith the following content:  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<user B's UUID>\",\n        \"displayName\": \"<name of user B>\",\n    },\n    \"target\": {\n        \"id\": \"<uuid of the room>\",\n        \"displayName\": \"<name of the room>\"\n    },\n    \"verb\": \"leave\"\n}",
            "title": "Another user leaves room"
        },
        {
            "location": "/md/events/#another-user-disconnects",
            "text": "If user A is in any room that user B is in, and user B disconnects from the chat server, an event called gn_user_disconnected  will be sent to user A with the following content:  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<user B's UUID>\",\n        \"displayName\": \"<name of user B>\",\n    },\n    \"verb\": 'disconnect'\n}",
            "title": "Another user disconnects"
        },
        {
            "location": "/md/events/#you-were-banned",
            "text": "If you are banned, either in a room, a channel or globally, you will receive the following event named  gn_banned :  {\n    \"actor\": {\n        \"id\": \"<ID of the one who banned you>\",\n        \"displayName\": \"<username of the one who banned you, in base64>\"\n    },\n    \"object\": {\n        \"id\": \"<your user ID>\",\n        \"displayName\": \"<your username in base64>\",\n        \"summary\": \"30s\",\n        \"updated\": \"2017-02-15T09:11:52Z\",\n        \"content\": \"<the reason for the ban>\"\n    },\n    \"target\": {\n        \"id\": \"<room/channel uuid>\",\n        \"displayName\": \"<room/channel name, in base64>\",\n        \"objectType\": \"<room/channel/global>\"\n    },\n    \"verb\": \"ban\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}   target.id and target.displayName will not be present if target.objectType is \"global\",  object.summary is the duration of the ban, e.g. 30s, 2h, 7d etc.,  object.updated is the timestamp when the ban will expire, in UTC,  object.content is the reason for the ban, but if no reason is given by the banned, this field will not be present.",
            "title": "You were banned"
        },
        {
            "location": "/md/events/#a-new-room-is-created",
            "text": "When a new room is created in a channel that user A is in, an event called  gn_room_created  will be sent to user A with\nthe following content:  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of user who created the room>\",\n        \"displayName\": \"<name of the user who created the room>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"object\": {\n        \"url\": \"<UUID of the channel for this room>\"\n    },\n    \"target\": {\n        \"id\": \"<UUID of the new room>\",\n        \"displayName\": \"<name of the new room>\"\n    },\n    \"verb\": \"create\"\n}",
            "title": "A new room is created"
        },
        {
            "location": "/md/events/#a-user-is-kicked-from-a-room",
            "text": "When a user is kicked from a room, an event will be sent to all users in that room (except the kicked user), called  gn_user_kicked , with the following content:  {\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\",\n    \"actor\": {\n        \"id\": \"<UUID of the kicker>\",\n        \"displayName\": \"<name of the kicker>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"object\": {\n        \"id\": \"<UUID of the kicked user>\",\n        \"displayName\": \"<name of the kicked user>\",,\n        \"attachments\": [\n            {\n                \"content\": \"NDA=\",\n                \"objectType\": \"age\"\n            },\n            {\n                \"content\": \"aHR0cDovL3NvbWUtdXJsLnRsZC9mb28uanBn\",\n                \"objectType\": \"avatar\"\n            }\n        ]\n    },\n    \"target\": {\n        \"id\": \"<UUID of the room the user was kicked from>\",\n        \"displayName\": \"<name of the room the user was kicked from>\"\n    },\n    \"verb\": \"kick\"\n}",
            "title": "A user is kicked from a room"
        },
        {
            "location": "/md/events/#a-user-is-banned",
            "text": "TODO: currently the user will be banned, but the \"kicked\" event will be broadcasted to relevant users. There's currently\nno \"banned\" event for this.",
            "title": "A user is banned"
        },
        {
            "location": "/md/external_events/",
            "text": "External events are activity streams send to the configured external queue (e.g. RabbitMQ).\n\n\nUser was kicked from a room\n\n\nExample of activity posted to the external queue:\n\n\n{\n    \"actor\": {\n        \"displayName\": \"admin\",\n        \"id\": \"0\"\n    },\n    \"object\": {\n        \"displayName\": \"YXNkZg==\",\n        \"content\": \"dGhpcyBpcyBhIHJlYXNvbg==\",\n        \"id\": \"197114\"\n    },\n    \"target\": {\n        \"displayName\": \"Y29vbCBndXlz\",\n        \"id\": \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\"\n    },\n    \"verb\": \"kick\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\n\n\nactor.id: ID of the user who kicked, or 0 if from admin interface,\n\n\nactor.displayName: name of the user who kicked, or admin if from admin interface,\n\n\nobject.id: ID of the user who got kicked,\n\n\nobject.content: base64 encoded \"reason\" for the kick (optional),\n\n\nobject.displayName: base64 encoded username of the user was kicked,\n\n\ntarget.id: UUID of the room the user was kicked from,\n\n\ntarget.displayName: base64 encoded name of the room.\n\n\n\n\nUser used a blacklisted word\n\n\n{\n    \"actor\": {\n        \"displayName\": \"YmF0bWFu\",\n        \"id\": \"997110\"\n    },\n    \"object\": {\n        \"content\": \"aGVsbG8gZnVjayB5b3U=\",\n        \"summary\": \"ZnVjaw==\"\n    },\n    \"target\": {\n        \"displayName\": \"Y29vbCBndXlz\",\n        \"id\": \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\"\n    },\n    \"verb\": \"blacklisted\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\n\n\ntarget.displayName: name of the room the message was sent in,\n\n\ntarget.id: uuid of the room the message was sent in,\n\n\nactor.id: id of the user who sent the message,\n\n\nactor.displayName: username of the user who sent the message,\n\n\nobject.content: the full message that was sent,\n\n\nobject.summary: the forbidden word that was used.\n\n\n\n\nUser was banned\n\n\nExample of activity posted to the external queue:\n\n\n{\n    \"actor\": {\n        \"displayName\": \"admin\",\n        \"id\": \"0\"\n    },\n    \"object\": {\n        \"displayName\": \"YXNkZg==\",\n        \"id\": \"1234\",\n        \"summary\": \"5m\",\n        \"content\": \"dGhpcyBpcyBhIHJlYXNvbg==\",\n        \"updated\": \"2016-12-22T07:13:09Z\"\n    },\n    \"target\": {\n        \"displayName\": \"Y29vbCBndXlz\",\n        \"objectType\": \"room\",\n        \"id\": \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\"\n    },\n    \"verb\": \"ban\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\n\n\nactor.id: ID of the user who banned, or 0 if from admin interface,\n\n\nactor.displayName: name of the user who banned, or admin if from admin interface,\n\n\nobject.id: ID of the user who got banned,\n\n\nobject.displayName: base64 encoded username of the user was banned,\n\n\nobject.content: base64 encoded \"reason\" for the ban (optional),\n\n\nobject.summary: the ban duration,\n\n\nobject.updated: the datetime when the ban will expire (in UTC),\n\n\ntarget.id: UUID of the room the user was kicked from,\n\n\ntarget.displayName: base64 encoded name of the room,\n\n\ntarget.objectType: one of \"room\", \"channel\", \"global\" (if \"global\", no displayName or id will be on target)\n\n\n\n\nUser joins room\n\n\nWhen a user joins a room the following activity is published to rabbitmq:\n\n\n{\n    \"object\": {\n        \"attachments\": [{\n            \"content\": \"MA==\",\n            \"objectType\": \"membership\"\n        }, {\n            \"content\": \"eQ==\",\n            \"objectType\": \"image\"\n        }, {\n            \"content\": \"bQ==\",\n            \"objectType\": \"gender\"\n        }, {\n            \"content\": \"NzA=\",\n            \"objectType\": \"age\"\n        }, {\n            \"content\": \"c2hhbmdoYWk=\",\n            \"objectType\": \"city\"\n        }, {\n            \"content\": \"Y24=\",\n            \"objectType\": \"country\"\n        }, {\n            \"content\": \"eQ==\",\n            \"objectType\": \"fake_checked\"\n        }, {\n            \"content\": \"eQ==\",\n            \"objectType\": \"has_webcam\"\n        }]\n    },\n    \"target\": {\n        \"displayName\": \"YmFkIGtpZHo=\",\n        \"id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\"\n    },\n    \"id\": \"bfa26b43-492f-4ec9-a83e-32e64ba2bc51\",\n    \"actor\": {\n        \"displayName\": \"YXNvZGZpaGFzZG9maWg=\",\n        \"id\": \"385280\",\n        \"image\": {\n            \"url\": \"n\"\n        }\n    },\n    \"published\": \"2017-01-04T09:58:37Z\",\n    \"verb\": \"join\"\n}\n\n\n\nUser ban was removed\n\n\nExample of activity when a user's ban was manually removed in the admin interface:\n\n\n{\n    \"actor\": {\n        \"id\": \"0\",\n        \"displayName\": \"YWRtaW4=\"\n    },\n    \"target\": {\n        \"id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\",\n        \"displayName\": \"YmFkIGtpZHo=\",\n        \"objectType\": \"room\"\n    },\n    \"published\": \"2017-01-03T05:50:11Z\",\n    \"verb\": \"unban\",\n    \"id\": \"49b067bb-79fe-48bd-9c03-dc4fd8f60192\",\n    \"object\": {\n        \"id\": \"124352\",\n        \"displayName\": \"Zm9vYmFyenoyMw==\"\n    }\n}\n\n\n\n\n\ntarget.id: room ID or channel ID\n\n\ntarget.objectType: \"room\", \"channel\" or \"global\"\n\n\nobject.id: ID of the user\n\n\nobject.displayName: name fo the user\n\n\n\n\nIf \ntarget.objectType\n is \nglobal\n then no \ntarget.id\n or \ntarget.displayName\n will be included.\n\n\nUser sends a message to a room/user\n\n\nWhenever a user sends a message an event will be published to the configured MQ, so another system can analyze activity\nlevel of users. Example activity: \n\n\n{\n    \"actor\": {\n        \"id\": \"<user ID\">,\n        \"displayName\": \"<base64 encoded username>\"\n    },\n    \"verb\": \"send\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\nUser successfully logged in\n\n\nExample of activity when a user successfully logs in:\n\n\n{\n    \"actor\": {\n        \"id\": \"<user ID>\",\n        \"displayName\": \"<base64 encoded username>\"\n    },\n    \"verb\": \"login\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\nA user was reported for a message he/she sent\n\n\nA message may be reported in the front-end, and a report will be published to the MQ. The event looks like this:\n\n\n{\n    \"actor\": {\n        \"id\": \"<user ID that reported the message>\",\n        \"displayName\": \"<the user name who reported the message>\"\n    },\n    \"object\": {\n        \"id\": \"<uuid of message>\",\n        \"content\": \"<the actual message to report, base64>\",\n        \"summary\": \"<optional reason text, base64>\"\n    },\n    \"target\": {\n        \"id\": \"<user ID to report>\",\n        \"displayName\": \"<the user name of the reported user>\"\n    },\n    \"verb\": \"report\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}\n\n\n\nUser disconnected\n\n\nExample of activity when a user disconnects:\n\n\n{\n    \"actor\": {\n        \"id\": \"<user ID>\",\n        \"displayName\": \"<base64 encoded username>\"\n    },\n    \"verb\": \"disconnect\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}",
            "title": "External Events"
        },
        {
            "location": "/md/external_events/#user-was-kicked-from-a-room",
            "text": "Example of activity posted to the external queue:  {\n    \"actor\": {\n        \"displayName\": \"admin\",\n        \"id\": \"0\"\n    },\n    \"object\": {\n        \"displayName\": \"YXNkZg==\",\n        \"content\": \"dGhpcyBpcyBhIHJlYXNvbg==\",\n        \"id\": \"197114\"\n    },\n    \"target\": {\n        \"displayName\": \"Y29vbCBndXlz\",\n        \"id\": \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\"\n    },\n    \"verb\": \"kick\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}   actor.id: ID of the user who kicked, or 0 if from admin interface,  actor.displayName: name of the user who kicked, or admin if from admin interface,  object.id: ID of the user who got kicked,  object.content: base64 encoded \"reason\" for the kick (optional),  object.displayName: base64 encoded username of the user was kicked,  target.id: UUID of the room the user was kicked from,  target.displayName: base64 encoded name of the room.",
            "title": "User was kicked from a room"
        },
        {
            "location": "/md/external_events/#user-used-a-blacklisted-word",
            "text": "{\n    \"actor\": {\n        \"displayName\": \"YmF0bWFu\",\n        \"id\": \"997110\"\n    },\n    \"object\": {\n        \"content\": \"aGVsbG8gZnVjayB5b3U=\",\n        \"summary\": \"ZnVjaw==\"\n    },\n    \"target\": {\n        \"displayName\": \"Y29vbCBndXlz\",\n        \"id\": \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\"\n    },\n    \"verb\": \"blacklisted\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}   target.displayName: name of the room the message was sent in,  target.id: uuid of the room the message was sent in,  actor.id: id of the user who sent the message,  actor.displayName: username of the user who sent the message,  object.content: the full message that was sent,  object.summary: the forbidden word that was used.",
            "title": "User used a blacklisted word"
        },
        {
            "location": "/md/external_events/#user-was-banned",
            "text": "Example of activity posted to the external queue:  {\n    \"actor\": {\n        \"displayName\": \"admin\",\n        \"id\": \"0\"\n    },\n    \"object\": {\n        \"displayName\": \"YXNkZg==\",\n        \"id\": \"1234\",\n        \"summary\": \"5m\",\n        \"content\": \"dGhpcyBpcyBhIHJlYXNvbg==\",\n        \"updated\": \"2016-12-22T07:13:09Z\"\n    },\n    \"target\": {\n        \"displayName\": \"Y29vbCBndXlz\",\n        \"objectType\": \"room\",\n        \"id\": \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\"\n    },\n    \"verb\": \"ban\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}   actor.id: ID of the user who banned, or 0 if from admin interface,  actor.displayName: name of the user who banned, or admin if from admin interface,  object.id: ID of the user who got banned,  object.displayName: base64 encoded username of the user was banned,  object.content: base64 encoded \"reason\" for the ban (optional),  object.summary: the ban duration,  object.updated: the datetime when the ban will expire (in UTC),  target.id: UUID of the room the user was kicked from,  target.displayName: base64 encoded name of the room,  target.objectType: one of \"room\", \"channel\", \"global\" (if \"global\", no displayName or id will be on target)",
            "title": "User was banned"
        },
        {
            "location": "/md/external_events/#user-joins-room",
            "text": "When a user joins a room the following activity is published to rabbitmq:  {\n    \"object\": {\n        \"attachments\": [{\n            \"content\": \"MA==\",\n            \"objectType\": \"membership\"\n        }, {\n            \"content\": \"eQ==\",\n            \"objectType\": \"image\"\n        }, {\n            \"content\": \"bQ==\",\n            \"objectType\": \"gender\"\n        }, {\n            \"content\": \"NzA=\",\n            \"objectType\": \"age\"\n        }, {\n            \"content\": \"c2hhbmdoYWk=\",\n            \"objectType\": \"city\"\n        }, {\n            \"content\": \"Y24=\",\n            \"objectType\": \"country\"\n        }, {\n            \"content\": \"eQ==\",\n            \"objectType\": \"fake_checked\"\n        }, {\n            \"content\": \"eQ==\",\n            \"objectType\": \"has_webcam\"\n        }]\n    },\n    \"target\": {\n        \"displayName\": \"YmFkIGtpZHo=\",\n        \"id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\"\n    },\n    \"id\": \"bfa26b43-492f-4ec9-a83e-32e64ba2bc51\",\n    \"actor\": {\n        \"displayName\": \"YXNvZGZpaGFzZG9maWg=\",\n        \"id\": \"385280\",\n        \"image\": {\n            \"url\": \"n\"\n        }\n    },\n    \"published\": \"2017-01-04T09:58:37Z\",\n    \"verb\": \"join\"\n}",
            "title": "User joins room"
        },
        {
            "location": "/md/external_events/#user-ban-was-removed",
            "text": "Example of activity when a user's ban was manually removed in the admin interface:  {\n    \"actor\": {\n        \"id\": \"0\",\n        \"displayName\": \"YWRtaW4=\"\n    },\n    \"target\": {\n        \"id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\",\n        \"displayName\": \"YmFkIGtpZHo=\",\n        \"objectType\": \"room\"\n    },\n    \"published\": \"2017-01-03T05:50:11Z\",\n    \"verb\": \"unban\",\n    \"id\": \"49b067bb-79fe-48bd-9c03-dc4fd8f60192\",\n    \"object\": {\n        \"id\": \"124352\",\n        \"displayName\": \"Zm9vYmFyenoyMw==\"\n    }\n}   target.id: room ID or channel ID  target.objectType: \"room\", \"channel\" or \"global\"  object.id: ID of the user  object.displayName: name fo the user   If  target.objectType  is  global  then no  target.id  or  target.displayName  will be included.",
            "title": "User ban was removed"
        },
        {
            "location": "/md/external_events/#user-sends-a-message-to-a-roomuser",
            "text": "Whenever a user sends a message an event will be published to the configured MQ, so another system can analyze activity\nlevel of users. Example activity:   {\n    \"actor\": {\n        \"id\": \"<user ID\">,\n        \"displayName\": \"<base64 encoded username>\"\n    },\n    \"verb\": \"send\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}",
            "title": "User sends a message to a room/user"
        },
        {
            "location": "/md/external_events/#user-successfully-logged-in",
            "text": "Example of activity when a user successfully logs in:  {\n    \"actor\": {\n        \"id\": \"<user ID>\",\n        \"displayName\": \"<base64 encoded username>\"\n    },\n    \"verb\": \"login\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}",
            "title": "User successfully logged in"
        },
        {
            "location": "/md/external_events/#a-user-was-reported-for-a-message-heshe-sent",
            "text": "A message may be reported in the front-end, and a report will be published to the MQ. The event looks like this:  {\n    \"actor\": {\n        \"id\": \"<user ID that reported the message>\",\n        \"displayName\": \"<the user name who reported the message>\"\n    },\n    \"object\": {\n        \"id\": \"<uuid of message>\",\n        \"content\": \"<the actual message to report, base64>\",\n        \"summary\": \"<optional reason text, base64>\"\n    },\n    \"target\": {\n        \"id\": \"<user ID to report>\",\n        \"displayName\": \"<the user name of the reported user>\"\n    },\n    \"verb\": \"report\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}",
            "title": "A user was reported for a message he/she sent"
        },
        {
            "location": "/md/external_events/#user-disconnected",
            "text": "Example of activity when a user disconnects:  {\n    \"actor\": {\n        \"id\": \"<user ID>\",\n        \"displayName\": \"<base64 encoded username>\"\n    },\n    \"verb\": \"disconnect\",\n    \"id\": \"<server-generated UUID>\",\n    \"published\": \"<server-generated timestamp, RFC3339 format>\"\n}",
            "title": "User disconnected"
        },
        {
            "location": "/md/rest/",
            "text": "GET /history\n\n\nRequest contains info on what time slice, target, origin to get history for:\n\n\n{\n    \"from_time\": \"2016-12-26T08:39:54Z\",\n    \"to_time\": \"2016-12-28T08:39:54Z\",\n    \"user_id\": \"124352\",\n    \"room_id\": \"dedf878e-b25d-4713-8058-20c6f0547c59\"\n}\n\n\n\nResponse would be something similar to the following:\n\n\n{\n    \"status_code\": 200,\n    \"data\": [{\n        \"deleted\": false,\n        \"target_name\": \"YmFkIGtpZHo=\",\n        \"target_id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\",\n        \"timestamp\": \"2017-01-26T04:58:33Z\",\n        \"from_user_name\": \"YmF0bWFu\",\n        \"message_id\": \"37db81f2-4e16-4076-b759-8ce1c23a364e\",\n        \"from_user_id\": \"997110\",\n        \"channel_name\": \"U2hhbmdoYWk=\",\n        \"body\": \"aG93IGFyZSB5b3U/\",\n        \"domain\": \"room\",\n        \"channel_id\": \"dedf878e-b25d-4713-8058-20c6f0547c59\"\n    }, {\n        \"deleted\": false,\n        \"target_name\": \"YmFkIGtpZHo=\",\n        \"target_id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\",\n        \"timestamp\": \"2017-01-26T04:58:31Z\",\n        \"from_user_name\": \"YmF0bWFu\",\n        \"message_id\": \"416d3c60-7197-471c-a706-7dbeca090d11\",\n        \"from_user_id\": \"997110\",\n        \"channel_name\": \"U2hhbmdoYWk=\",\n        \"body\": \"aGVsbG8gdGhlcmU=\",\n        \"domain\": \"room\",\n        \"channel_id\": \"dedf878e-b25d-4713-8058-20c6f0547c59\"\n    }, {\n        \"deleted\": false,\n        \"target_name\": \"YmFkIGtpZHo=\",\n        \"target_id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\",\n        \"timestamp\": \"2017-01-26T04:58:16Z\",\n        \"from_user_name\": \"YmF0bWFu\",\n        \"message_id\": \"91655457-3712-4c2f-b6f2-c3b0f8be29e5\",\n        \"from_user_id\": \"997110\",\n        \"channel_name\": \"U2hhbmdoYWk=\",\n        \"body\": \"ZmRzYQ==\",\n        \"domain\": \"room\",\n        \"channel_id\": \"dedf878e-b25d-4713-8058-20c6f0547c59\"\n    }]\n}\n\n\n\n\n\nIf neither \nfrom_time\n nor \nto_time\n is specified, the last 7 days will be used as limit,\n\n\nIf \nfrom_time\n is specified but no \nto_time\n, \nto_time\n will be \nfrom_time + 7 days\n,\n\n\nIf \nto_time\n is specified but no \nfrom_time\n, \nfrom_time\n will be \nto_time - 7 days\n,\n\n\nEither \nuser_id\n or \nroom_id\n is required (both can be specified at the same time),\n\n\nto_time\n needs to be after \nfrom_time\n.\n\n\n\n\nPOST /set-admin\n\n\nSet a user as a global super user.\n\n\nRequest contains user ID and the user's name (in case the user doesn't exist):\n\n\n{\n    \"id\": \"1234\",\n    \"name\": \"myuser\"\n}\n\n\n\nResponse if OK:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\nOr if any errors:\n\n\n{\n    \"data\": \"no name parameter in request\", \n    \"status_code\": 500\n}\n\n\n\nPOST /remove-admin\n\n\nRemove global super user status for a user.\n\n\nRequest contains the user's ID only:\n\n\n{\n    \"id\": \"1234\"\n}\n\n\n\nResponse if OK:\n\n\n{\n    \"status_code\": 200\n}\n\n\n\nOr if any errors:\n\n\n{\n    \"data\": \"no id parameter in request\", \n    \"status_code\": 500\n}\n\n\n\nPOST /ban\n\n\nRequest contains info on who to ban where. For banning globally:\n\n\n{\n    \"1234\": {\n        \"duration\": \"24h\",\n        \"reason\": \"<optional base64 encoded free-text>\",\n        \"admin_id\": \"<id of user banning (must already exist), or leave empty for default>\",\n        \"type\": \"global\"\n    }\n}\n\n\n\nCan also ban multiple users at the same time:\n\n\n{\n    \"<user id>\": {\n        \"duration\": \"24h\",\n        \"type\": \"global\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is banning>\"\n    },\n    \"<user id>\": {\n        \"duration\": \"10m\",\n        \"target\": \"<channel uuid>\",\n        \"type\": \"channel\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is banning>\"\n    },\n    \"<user id>\": {\n        \"duration\": \"7d\",\n        \"target\": \"<room uuid>\",\n        \"type\": \"room\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is banning>\"\n    }\n}\n\n\n\nThe \"reason\" field must be base64 encoded. If the \"admin_id\" field is specified it will be used, if not the default ID\n\"0\" will be used.\n\n\nDuration is an integer followed by a char for the unit, which can be one of \"d\", \"h\", \"m\", \"s\" (days, hours, minutes, \nseconds). Negative or 0 durations are not allowed.\n\n\nWhen type is set to \"global\", no target is specified (meaning user is banned from the whole chat server).\n\n\nResponse will be something like the following:\n\n\n{\n    \"<user id>\": {\n        \"status\": \"OK\"\n    },\n    \"<user id>\": {\n        \"status\": \"FAIL\",\n        \"message\": \"invalid duration 5k\"\n    },\n    \"<user id>\": {\n        \"status\": \"FAIL\",\n        \"message\": \"no such user\"\n    },\n    \"<user id>\" {\n        \"status\": \"OK\"\n    }\n}\n\n\n\nPOST /kick\n\n\nRequest contains:\n\n\n{\n    \"<user id>\": {\n        \"target\": \"<room uuid>\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is kicking>\"\n    },\n    \"<user id>\": {\n        \"target\": \"<room uuid>\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is kicking>\"\n    },\n    \"<user id>\": {\n        \"target\": \"<room uuid>\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is kicking>\"\n    }\n}\n\n\n\nThe \"reason\" field must be base64 encoded. If the \"admin_id\" field is specified it will be used, if not the default ID\n\"0\" will be used.\n\n\nResponse will be something like the following:\n\n\n{\n    \"<user id>\": {\n        \"status\": \"OK\"\n    },\n    \"<user id>\": {\n        \"status\": \"FAIL\",\n        \"message\": \"no such user\"\n    },\n    \"<user id>\" {\n        \"status\": \"OK\"\n    }\n}\n\n\n\nGET /roles\n\n\nRequest contains a list of user IDs, e.g.:\n\n\n{\n    \"users\": [\n        \"124352\",\n        \"5678\"\n    ]\n}\n\n\n\nResponse would be something similar to the following:\n\n\n{\n    \"data\": {\n        \"124352\": {\n            \"room\": {\n                \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\": [\n                    \"moderator\"\n                ],\n                \"bb0ea500-cd94-11e6-b178-8323deb605bf\": [\n                    \"owner\"\n                ]\n            },\n            \"channel\": {\n                \"dedf878e-b25d-4713-8058-20c6f0547c59\": [\n                    \"admin\", \n                    \"owner\"\n                ]\n            },\n            \"global\": [\n                \"superuser\"\n            ]\n        },\n        \"5678\": {\n            \"room\": {},\n            \"channel\": {},\n            \"global\": []\n        }\n    },\n    \"status_code\": 200\n}\n\n\n\nPossible roles are:\n\n\n\n\nglobal superuser\n\n\nchannel owner\n\n\nchannel admin\n\n\nroom owner\n\n\nroom moderator\n\n\n\n\nGET /rooms-for-users\n\n\nRequest contains a list of user IDs, e.g.:\n\n\n{\n    \"users\": [\n        \"1234\",\n        \"5678\"\n    ]\n}\n\n\n\nResponse would be all rooms each user is currently in (room names and channel names are base64 encoded):\n\n\n{\n    \"1234\": [{\n        \"room_id\": \"efeca2fe-ba93-11e6-bc9a-4f6f56293063\",\n        \"room_name\": \"b2gsIHNvIHlvdSBhY3R1YWxseSBjaGVja2VkIHdoYXQgaXMgd2FzPw==\",\n        \"channel_id\": \"fb843140-ba93-11e6-b178-97f0297a6d4d\",\n        \"channel_name\": \"dG9tIGlzIGEgZnJlbmNoIG1hZG1hbg==\"\n    }],\n    \"5678\": [{\n        \"room_id\": \"ca1dc3b4-ba93-11e6-b835-7f1d961023a1\",\n        \"room_name\": \"cmVhZCB1cCBvbiBoeXBlcmxvZ2xvZysr\",\n        \"channel_id\": \"f621fcaa-ba93-11e6-8590-bfe35ff80c03\",\n        \"channel_name\": \"YSByZWRidWxsIGEgZGF5IGtlZXBzIHRoZSBzYW5kbWFuIGF3YXk=\"\n    }]\n}\n\n\n\nPOST /delete-messages\n\n\nUsed to delete ALL messages for a specific user ID.\n\n\nRequest body looks like this:\n\n\n{\n    \"id\": \"<user ID>\"\n}\n\n\n\nExample response:\n\n\n{\n    \"status_code\": 200, \n    \"data\": {\n        \"success\": 4, \n        \"failed\": 0,\n        \"total\": 4\n    }\n}\n\n\n\nOr if other kinds of failures:\n\n\n{\n    \"status_code\": 500, \n    \"data\": \"<error message, e.g. 'no id parameter in request'>\"\n}\n\n\n\nGET /banned\n\n\nNo data required in request.\n\n\nResponse is all banned users, separated by channel, room and globally. Example response:\n\n\n{\n    \"channels\": {},\n    \"global\": {\n        \"185626\": {\n            \"name\": \"bHVlbA==\",\n            \"duration\": \"1h\",\n            \"timestamp\": \"2016-12-05T03:50:24Z\"\n        }\n    },\n    \"rooms\": {\n        \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\": {\n            \"name\": \"Y29vbCBndXlz\",\n            \"users\": {\n                \"101108\": {\n                    \"name\": \"bHVlbA==\",\n                    \"duration\": \"30m\",\n                    \"timestamp\": \"2016-12-05T03:20:24Z\"\n                }\n            }\n        }\n    }\n}\n\n\n\nThe \"timestamp\" in the response is the UTC timestamp for when the ban will expire. Names or channels, rooms and users\nare all base64 encoded. The dictionary keys for \"rooms\" are the UUIDs of the rooms, same for channels, while for users\nit's their user IDs as keys. The bans for \"global\" have no separation by room/channel IDs, and no \"name\" or \"users\" \nkeys.\n\n\nUser ID parameter\n\n\nThe \n/banned\n endpoint supports having a json with user ID's in the request body to only get bans for those users. E.g.:\n\n\ncurl localhost:5400/banned -d '{\"users\":[\"110464\"]}' -X GET -H \"Content-Type: application/json\"\n\n\n\nResponse would be (slightly different from above example without request body):\n\n\n{\n    \"data\": {\n        \"110464\": {\n            \"channel\": {},\n            \"room\": {\n                \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\": {\n                    \"name\": \"Y29vbCBndXlz\",\n                    \"duration\": \"15m\",\n                    \"timestamp\": \"2016-12-14T09:23:00Z\"\n                },\n                \"675eb2a5-17c6-45e4-bc0f-674241573f22\": {\n                    \"name\": \"YmFkIGtpZHo=\",\n                    \"duration\": \"2m\",\n                    \"timestamp\": \"2016-12-14T09:15:51Z\"\n                }\n            },\n            \"global\": {}\n        }\n    },\n    \"status_code\": 200\n}",
            "title": "REST API"
        },
        {
            "location": "/md/rest/#get-history",
            "text": "Request contains info on what time slice, target, origin to get history for:  {\n    \"from_time\": \"2016-12-26T08:39:54Z\",\n    \"to_time\": \"2016-12-28T08:39:54Z\",\n    \"user_id\": \"124352\",\n    \"room_id\": \"dedf878e-b25d-4713-8058-20c6f0547c59\"\n}  Response would be something similar to the following:  {\n    \"status_code\": 200,\n    \"data\": [{\n        \"deleted\": false,\n        \"target_name\": \"YmFkIGtpZHo=\",\n        \"target_id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\",\n        \"timestamp\": \"2017-01-26T04:58:33Z\",\n        \"from_user_name\": \"YmF0bWFu\",\n        \"message_id\": \"37db81f2-4e16-4076-b759-8ce1c23a364e\",\n        \"from_user_id\": \"997110\",\n        \"channel_name\": \"U2hhbmdoYWk=\",\n        \"body\": \"aG93IGFyZSB5b3U/\",\n        \"domain\": \"room\",\n        \"channel_id\": \"dedf878e-b25d-4713-8058-20c6f0547c59\"\n    }, {\n        \"deleted\": false,\n        \"target_name\": \"YmFkIGtpZHo=\",\n        \"target_id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\",\n        \"timestamp\": \"2017-01-26T04:58:31Z\",\n        \"from_user_name\": \"YmF0bWFu\",\n        \"message_id\": \"416d3c60-7197-471c-a706-7dbeca090d11\",\n        \"from_user_id\": \"997110\",\n        \"channel_name\": \"U2hhbmdoYWk=\",\n        \"body\": \"aGVsbG8gdGhlcmU=\",\n        \"domain\": \"room\",\n        \"channel_id\": \"dedf878e-b25d-4713-8058-20c6f0547c59\"\n    }, {\n        \"deleted\": false,\n        \"target_name\": \"YmFkIGtpZHo=\",\n        \"target_id\": \"675eb2a5-17c6-45e4-bc0f-674241573f22\",\n        \"timestamp\": \"2017-01-26T04:58:16Z\",\n        \"from_user_name\": \"YmF0bWFu\",\n        \"message_id\": \"91655457-3712-4c2f-b6f2-c3b0f8be29e5\",\n        \"from_user_id\": \"997110\",\n        \"channel_name\": \"U2hhbmdoYWk=\",\n        \"body\": \"ZmRzYQ==\",\n        \"domain\": \"room\",\n        \"channel_id\": \"dedf878e-b25d-4713-8058-20c6f0547c59\"\n    }]\n}   If neither  from_time  nor  to_time  is specified, the last 7 days will be used as limit,  If  from_time  is specified but no  to_time ,  to_time  will be  from_time + 7 days ,  If  to_time  is specified but no  from_time ,  from_time  will be  to_time - 7 days ,  Either  user_id  or  room_id  is required (both can be specified at the same time),  to_time  needs to be after  from_time .",
            "title": "GET /history"
        },
        {
            "location": "/md/rest/#post-set-admin",
            "text": "Set a user as a global super user.  Request contains user ID and the user's name (in case the user doesn't exist):  {\n    \"id\": \"1234\",\n    \"name\": \"myuser\"\n}  Response if OK:  {\n    \"status_code\": 200\n}  Or if any errors:  {\n    \"data\": \"no name parameter in request\", \n    \"status_code\": 500\n}",
            "title": "POST /set-admin"
        },
        {
            "location": "/md/rest/#post-remove-admin",
            "text": "Remove global super user status for a user.  Request contains the user's ID only:  {\n    \"id\": \"1234\"\n}  Response if OK:  {\n    \"status_code\": 200\n}  Or if any errors:  {\n    \"data\": \"no id parameter in request\", \n    \"status_code\": 500\n}",
            "title": "POST /remove-admin"
        },
        {
            "location": "/md/rest/#post-ban",
            "text": "Request contains info on who to ban where. For banning globally:  {\n    \"1234\": {\n        \"duration\": \"24h\",\n        \"reason\": \"<optional base64 encoded free-text>\",\n        \"admin_id\": \"<id of user banning (must already exist), or leave empty for default>\",\n        \"type\": \"global\"\n    }\n}  Can also ban multiple users at the same time:  {\n    \"<user id>\": {\n        \"duration\": \"24h\",\n        \"type\": \"global\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is banning>\"\n    },\n    \"<user id>\": {\n        \"duration\": \"10m\",\n        \"target\": \"<channel uuid>\",\n        \"type\": \"channel\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is banning>\"\n    },\n    \"<user id>\": {\n        \"duration\": \"7d\",\n        \"target\": \"<room uuid>\",\n        \"type\": \"room\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is banning>\"\n    }\n}  The \"reason\" field must be base64 encoded. If the \"admin_id\" field is specified it will be used, if not the default ID\n\"0\" will be used.  Duration is an integer followed by a char for the unit, which can be one of \"d\", \"h\", \"m\", \"s\" (days, hours, minutes, \nseconds). Negative or 0 durations are not allowed.  When type is set to \"global\", no target is specified (meaning user is banned from the whole chat server).  Response will be something like the following:  {\n    \"<user id>\": {\n        \"status\": \"OK\"\n    },\n    \"<user id>\": {\n        \"status\": \"FAIL\",\n        \"message\": \"invalid duration 5k\"\n    },\n    \"<user id>\": {\n        \"status\": \"FAIL\",\n        \"message\": \"no such user\"\n    },\n    \"<user id>\" {\n        \"status\": \"OK\"\n    }\n}",
            "title": "POST /ban"
        },
        {
            "location": "/md/rest/#post-kick",
            "text": "Request contains:  {\n    \"<user id>\": {\n        \"target\": \"<room uuid>\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is kicking>\"\n    },\n    \"<user id>\": {\n        \"target\": \"<room uuid>\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is kicking>\"\n    },\n    \"<user id>\": {\n        \"target\": \"<room uuid>\",\n        \"reason\": \"<option reason field, base64 encoded>\",\n        \"admin_id\": \"<optional id of admin user who is kicking>\"\n    }\n}  The \"reason\" field must be base64 encoded. If the \"admin_id\" field is specified it will be used, if not the default ID\n\"0\" will be used.  Response will be something like the following:  {\n    \"<user id>\": {\n        \"status\": \"OK\"\n    },\n    \"<user id>\": {\n        \"status\": \"FAIL\",\n        \"message\": \"no such user\"\n    },\n    \"<user id>\" {\n        \"status\": \"OK\"\n    }\n}",
            "title": "POST /kick"
        },
        {
            "location": "/md/rest/#get-roles",
            "text": "Request contains a list of user IDs, e.g.:  {\n    \"users\": [\n        \"124352\",\n        \"5678\"\n    ]\n}  Response would be something similar to the following:  {\n    \"data\": {\n        \"124352\": {\n            \"room\": {\n                \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\": [\n                    \"moderator\"\n                ],\n                \"bb0ea500-cd94-11e6-b178-8323deb605bf\": [\n                    \"owner\"\n                ]\n            },\n            \"channel\": {\n                \"dedf878e-b25d-4713-8058-20c6f0547c59\": [\n                    \"admin\", \n                    \"owner\"\n                ]\n            },\n            \"global\": [\n                \"superuser\"\n            ]\n        },\n        \"5678\": {\n            \"room\": {},\n            \"channel\": {},\n            \"global\": []\n        }\n    },\n    \"status_code\": 200\n}  Possible roles are:   global superuser  channel owner  channel admin  room owner  room moderator",
            "title": "GET /roles"
        },
        {
            "location": "/md/rest/#get-rooms-for-users",
            "text": "Request contains a list of user IDs, e.g.:  {\n    \"users\": [\n        \"1234\",\n        \"5678\"\n    ]\n}  Response would be all rooms each user is currently in (room names and channel names are base64 encoded):  {\n    \"1234\": [{\n        \"room_id\": \"efeca2fe-ba93-11e6-bc9a-4f6f56293063\",\n        \"room_name\": \"b2gsIHNvIHlvdSBhY3R1YWxseSBjaGVja2VkIHdoYXQgaXMgd2FzPw==\",\n        \"channel_id\": \"fb843140-ba93-11e6-b178-97f0297a6d4d\",\n        \"channel_name\": \"dG9tIGlzIGEgZnJlbmNoIG1hZG1hbg==\"\n    }],\n    \"5678\": [{\n        \"room_id\": \"ca1dc3b4-ba93-11e6-b835-7f1d961023a1\",\n        \"room_name\": \"cmVhZCB1cCBvbiBoeXBlcmxvZ2xvZysr\",\n        \"channel_id\": \"f621fcaa-ba93-11e6-8590-bfe35ff80c03\",\n        \"channel_name\": \"YSByZWRidWxsIGEgZGF5IGtlZXBzIHRoZSBzYW5kbWFuIGF3YXk=\"\n    }]\n}",
            "title": "GET /rooms-for-users"
        },
        {
            "location": "/md/rest/#post-delete-messages",
            "text": "Used to delete ALL messages for a specific user ID.  Request body looks like this:  {\n    \"id\": \"<user ID>\"\n}  Example response:  {\n    \"status_code\": 200, \n    \"data\": {\n        \"success\": 4, \n        \"failed\": 0,\n        \"total\": 4\n    }\n}  Or if other kinds of failures:  {\n    \"status_code\": 500, \n    \"data\": \"<error message, e.g. 'no id parameter in request'>\"\n}",
            "title": "POST /delete-messages"
        },
        {
            "location": "/md/rest/#get-banned",
            "text": "No data required in request.  Response is all banned users, separated by channel, room and globally. Example response:  {\n    \"channels\": {},\n    \"global\": {\n        \"185626\": {\n            \"name\": \"bHVlbA==\",\n            \"duration\": \"1h\",\n            \"timestamp\": \"2016-12-05T03:50:24Z\"\n        }\n    },\n    \"rooms\": {\n        \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\": {\n            \"name\": \"Y29vbCBndXlz\",\n            \"users\": {\n                \"101108\": {\n                    \"name\": \"bHVlbA==\",\n                    \"duration\": \"30m\",\n                    \"timestamp\": \"2016-12-05T03:20:24Z\"\n                }\n            }\n        }\n    }\n}  The \"timestamp\" in the response is the UTC timestamp for when the ban will expire. Names or channels, rooms and users\nare all base64 encoded. The dictionary keys for \"rooms\" are the UUIDs of the rooms, same for channels, while for users\nit's their user IDs as keys. The bans for \"global\" have no separation by room/channel IDs, and no \"name\" or \"users\" \nkeys.",
            "title": "GET /banned"
        },
        {
            "location": "/md/rest/#user-id-parameter",
            "text": "The  /banned  endpoint supports having a json with user ID's in the request body to only get bans for those users. E.g.:  curl localhost:5400/banned -d '{\"users\":[\"110464\"]}' -X GET -H \"Content-Type: application/json\"  Response would be (slightly different from above example without request body):  {\n    \"data\": {\n        \"110464\": {\n            \"channel\": {},\n            \"room\": {\n                \"1aa3f5f5-ba46-4aca-999a-978c7f2237c7\": {\n                    \"name\": \"Y29vbCBndXlz\",\n                    \"duration\": \"15m\",\n                    \"timestamp\": \"2016-12-14T09:23:00Z\"\n                },\n                \"675eb2a5-17c6-45e4-bc0f-674241573f22\": {\n                    \"name\": \"YmFkIGtpZHo=\",\n                    \"duration\": \"2m\",\n                    \"timestamp\": \"2016-12-14T09:15:51Z\"\n                }\n            },\n            \"global\": {}\n        }\n    },\n    \"status_code\": 200\n}",
            "title": "User ID parameter"
        },
        {
            "location": "/md/wio/",
            "text": "Online status is kept in redis for users who successfully logs in and keeps their socket connection open.\n\n\nFour keys are maintained in redis:\n\n\n\n\nusers:online:bitmap\n\n\nusers:online:set\n\n\nusers:multicast\n\n\nuser:status:\n\n\n\n\nusers:online:bitmap (BITMAP)\n\n\nThe ID of the user is used as the offset in the bitmap. When a user logs in the bit in that offset will be set to 1,\nand when the user's socket closes the bit is set to 0.\n\n\nusers:online:set (SET)\n\n\nA set containing all the IDs of users who are currently online. When a user logs in the user ID is added to the set, and\nwhen the socket closes the ID is removed from the set.\n\n\nWhen a user changes his/her status to invisible his/her ID will also be removed from this set. \n\n\nusers:multicast (SET)\n\n\nSame as \nusers:online:set\n, except that when a user goes invisible the user ID stays in this set. This allows \nmulticasting of notifications without showing up as \nonline\n.\n\n\nuser:status:USER_ID (STRING)\n\n\nOne key for each user containing the status, which is a single character with the following meaning:\n\n\n\n\n0: available (online)\n\n\n2: chatting (not currently used)\n\n\n3: invisible\n\n\n4: unavailable (offline)\n\n\n5: unknown",
            "title": "Who Is Online?"
        },
        {
            "location": "/md/wio/#usersonlinebitmap-bitmap",
            "text": "The ID of the user is used as the offset in the bitmap. When a user logs in the bit in that offset will be set to 1,\nand when the user's socket closes the bit is set to 0.",
            "title": "users:online:bitmap (BITMAP)"
        },
        {
            "location": "/md/wio/#usersonlineset-set",
            "text": "A set containing all the IDs of users who are currently online. When a user logs in the user ID is added to the set, and\nwhen the socket closes the ID is removed from the set.  When a user changes his/her status to invisible his/her ID will also be removed from this set.",
            "title": "users:online:set (SET)"
        },
        {
            "location": "/md/wio/#usersmulticast-set",
            "text": "Same as  users:online:set , except that when a user goes invisible the user ID stays in this set. This allows \nmulticasting of notifications without showing up as  online .",
            "title": "users:multicast (SET)"
        },
        {
            "location": "/md/wio/#userstatususer_id-string",
            "text": "One key for each user containing the status, which is a single character with the following meaning:   0: available (online)  2: chatting (not currently used)  3: invisible  4: unavailable (offline)  5: unknown",
            "title": "user:status:USER_ID (STRING)"
        }
    ]
}